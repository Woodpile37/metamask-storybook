"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[8465],{"./ui/components/app/network-display/network-display.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultStory:()=>DefaultStory,DisplayOnly:()=>DisplayOnly,TargetNetwork:()=>TargetNetwork,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _DefaultStory$paramet,_DefaultStory$paramet2,_TargetNetwork$parame,_TargetNetwork$parame2,_DisplayOnly$paramete,_DisplayOnly$paramete2,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./shared/constants/network.ts"),_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./ui/helpers/constants/design-system.ts"),_component_library_banner_alert__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./ui/components/component-library/banner-alert/index.ts"),___WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./ui/components/app/network-display/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const __WEBPACK_DEFAULT_EXPORT__={title:"Components/App/NetworkDisplay",argTypes:{indicatorSize:{control:"select",options:Object.values(_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.$u)},labelProps:{control:"object"},targetNetwork:{control:"select",options:[...Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl),_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC]},disabled:{control:"boolean"},onClick:{action:"onClick",description:"The onClick event handler of the NetworkDisplay. If it is not passed it is assumed that the NetworkDisplay SHOULD NOT be interactive and removes the caret and changes the border color of the NetworkDisplay to border-muted"}},args:{targetNetwork:"goerli"}},DefaultStory=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library_banner_alert__WEBPACK_IMPORTED_MODULE_3__.w,{severity:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.zb.Warning,title:"Deprecated",description:"The <NetworkDisplay> component has been deprecated in favor of the new <PickerNetwork> component from the component-library. Please update your code to use the new <PickerNetwork> component instead, which can be found at ui/components/component-library/picker-network/picker-network.tsx.",actionButtonLabel:"See details",actionButtonProps:{href:"https://github.com/MetaMask/metamask-extension/issues/20485"},marginBottom:4}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_extends({},args,{targetNetwork:{type:args.targetNetwork,nickname:args.targetNetwork}})));DefaultStory.storyName="Default";const TargetNetwork=args=>{const targetNetworkArr=[...Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl),_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,Object.values(targetNetworkArr).map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_extends({},args,{key:variant,targetNetwork:{type:variant,nickname:variant}})))))},DisplayOnly=args=>{const targetNetworkArr=[...Object.keys(_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Jl),_shared_constants_network__WEBPACK_IMPORTED_MODULE_1__.Qv.RPC];return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,Object.values(targetNetworkArr).map((variant=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_4__.Z,_extends({},args,{key:variant,targetNetwork:{type:variant,nickname:variant},onClick:void 0})))))};DefaultStory.parameters={...DefaultStory.parameters,docs:{...null===(_DefaultStory$paramet=DefaultStory.parameters)||void 0===_DefaultStory$paramet?void 0:_DefaultStory$paramet.docs,source:{originalSource:'args => <>\n    <BannerAlert severity={Severity.Warning} title="Deprecated" description="The <NetworkDisplay> component has been deprecated in favor of the new <PickerNetwork> component from the component-library.\n        Please update your code to use the new <PickerNetwork> component instead, which can be found at ui/components/component-library/picker-network/picker-network.tsx." actionButtonLabel="See details" actionButtonProps={{\n    href: \'https://github.com/MetaMask/metamask-extension/issues/20485\'\n  }} marginBottom={4} />\n    <NetworkDisplay {...args} targetNetwork={{\n    type: args.targetNetwork,\n    nickname: args.targetNetwork\n  }} />\n  </>',...null===(_DefaultStory$paramet2=DefaultStory.parameters)||void 0===_DefaultStory$paramet2||null===(_DefaultStory$paramet2=_DefaultStory$paramet2.docs)||void 0===_DefaultStory$paramet2?void 0:_DefaultStory$paramet2.source}}},TargetNetwork.parameters={...TargetNetwork.parameters,docs:{...null===(_TargetNetwork$parame=TargetNetwork.parameters)||void 0===_TargetNetwork$parame?void 0:_TargetNetwork$parame.docs,source:{originalSource:"args => {\n  const targetNetworkArr = [...Object.keys(BUILT_IN_NETWORKS), NETWORK_TYPES.RPC];\n  return <>\n      {Object.values(targetNetworkArr).map(variant => <NetworkDisplay {...args} key={variant} targetNetwork={{\n      type: variant,\n      nickname: variant\n    }} />)}\n    </>;\n}",...null===(_TargetNetwork$parame2=TargetNetwork.parameters)||void 0===_TargetNetwork$parame2||null===(_TargetNetwork$parame2=_TargetNetwork$parame2.docs)||void 0===_TargetNetwork$parame2?void 0:_TargetNetwork$parame2.source}}},DisplayOnly.parameters={...DisplayOnly.parameters,docs:{...null===(_DisplayOnly$paramete=DisplayOnly.parameters)||void 0===_DisplayOnly$paramete?void 0:_DisplayOnly$paramete.docs,source:{originalSource:"args => {\n  const targetNetworkArr = [...Object.keys(BUILT_IN_NETWORKS), NETWORK_TYPES.RPC];\n  return <>\n      {Object.values(targetNetworkArr).map(variant => <NetworkDisplay {...args} key={variant} targetNetwork={{\n      type: variant,\n      nickname: variant\n    }} onClick={undefined} />)}\n    </>;\n}",...null===(_DisplayOnly$paramete2=DisplayOnly.parameters)||void 0===_DisplayOnly$paramete2||null===(_DisplayOnly$paramete2=_DisplayOnly$paramete2.docs)||void 0===_DisplayOnly$paramete2?void 0:_DisplayOnly$paramete2.source}}};const __namedExportsOrder=["DefaultStory","TargetNetwork","DisplayOnly"];DefaultStory.__docgenInfo={description:"",methods:[],displayName:"DefaultStory"},TargetNetwork.__docgenInfo={description:"",methods:[],displayName:"TargetNetwork"},DisplayOnly.__docgenInfo={description:"",methods:[],displayName:"DisplayOnly"}}}]);