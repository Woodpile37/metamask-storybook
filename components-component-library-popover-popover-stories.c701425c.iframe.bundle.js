/*! For license information please see components-component-library-popover-popover-stories.c701425c.iframe.bundle.js.LICENSE.txt */
"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[2462],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$4:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.$4,Xz:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Xz,h_:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.h_,oG:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.oG});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-PCJTTTQV.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./ui/components/component-library/popover/popover.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Children:()=>Children,DefaultStory:()=>DefaultStory,Flip:()=>Flip,HasArrow:()=>HasArrow,IsOpen:()=>IsOpen,IsPortal:()=>IsPortal,MatchWidth:()=>MatchWidth,MouseEventDemo:()=>MouseEventDemo,Offset:()=>Offset,OnFocusBlur:()=>OnFocusBlur,OnPressEscKey:()=>OnPressEscKey,Position:()=>Position,PreventOverflow:()=>PreventOverflow,ReferenceElement:()=>ReferenceElement,ReferenceHidden:()=>ReferenceHidden,Role:()=>Role,WithPopoverHeader:()=>WithPopoverHeader,__namedExportsOrder:()=>__namedExportsOrder,default:()=>popover_stories});var react=__webpack_require__("./node_modules/react/index.js"),box=__webpack_require__("./ui/components/ui/box/box.js"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),component_library=__webpack_require__("./ui/components/component-library/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),popover=__webpack_require__("./ui/components/component-library/popover/popover.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h2:"h2",code:"code",a:"a",h3:"h3",pre:"pre"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(_components.h1,{id:"popover",children:"Popover"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Popover is an overlay that appears by the trigger used for menus, additional contents, and contains at least one focusable element."}),"\n",(0,jsx_runtime.jsx)(dist.Xz,{children:(0,jsx_runtime.jsx)(dist.oG,{id:"components-componentlibrary-popover--default-story"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"props",children:"Props"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"Popover"})," accepts all props below as well as all ",(0,jsx_runtime.jsx)(_components.a,{href:"/docs/ui-components-ui-box-box-stories-js--default-story#props",children:"Box"})," component props"]}),"\n",(0,jsx_runtime.jsx)(dist.$4,{of:popover.J}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"reference-element",children:"Reference Element"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"referenceElement"})," prop is required and used to position the popover relative to the reference element."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { useState } from 'react';\nimport { Popover } from '../../ui/component-library';\n\nconst [referenceElement, setReferenceElement] = useState();\n\nconst setBoxRef = (ref) => {\nsetReferenceElement(ref);\n};\n\n<Box ref={setBoxRef}></Box>\n<Popover referenceElement={referenceElement}>Reference Element</Popover>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"children",children:"Children"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Popover accepts any children and has a default padding of ",(0,jsx_runtime.jsx)(_components.code,{children:"4"})," (16px)."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import {\n  Popover,\n  Text,\n  Icon,\n  IconSize,\n  IconName,\n} from '../../ui/component-library';\n\n<Popover>\n  <Text>\n    Demo of popover with children.\n    <Icon size={IconSize.Inherit} name={IconName.Info} />\n  </Text>\n</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"position",children:"Position"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"position"})," prop with the ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverPosition"})," enum to set the position of the popover relative to the reference element."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Default is ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverPosition.Auto"})]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover, PopoverPosition } from '../../ui/component-library';\n\n<Popover position={PopoverPosition.Auto}>Auto</Popover>\n<Popover position={PopoverPosition.AutoStart}>AutoStart</Popover>\n<Popover position={PopoverPosition.AutoEnd}>AutoEnd</Popover>\n<Popover position={PopoverPosition.Top}>Top</Popover>\n<Popover position={PopoverPosition.TopStart}>TopStart</Popover>\n<Popover position={PopoverPosition.TopEnd}>TopEnd</Popover>\n<Popover position={PopoverPosition.Right}>Right</Popover>\n<Popover position={PopoverPosition.RightStart}>RightStart</Popover>\n<Popover position={PopoverPosition.RightEnd}>RightEnd</Popover>\n<Popover position={PopoverPosition.Bottom}>Bottom</Popover>\n<Popover position={PopoverPosition.BottomStart}>BottomStart</Popover>\n<Popover position={PopoverPosition.BottomEnd}>BottomEnd</Popover>\n<Popover position={PopoverPosition.Left}>Left</Popover>\n<Popover position={PopoverPosition.LeftStart}>LeftStart</Popover>\n<Popover position={PopoverPosition.LeftEnd}>LeftEnd</Popover>\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"is-portal",children:"Is Portal"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["The ",(0,jsx_runtime.jsx)(_components.code,{children:"isPortal"})," prop is a boolean that when set to true, causes the Popover to be rendered as a separate DOM element at the end of the document body.\nDefault ",(0,jsx_runtime.jsx)(_components.code,{children:"false"})]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover isPortal={true}>Popover using create portal</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"has-arrow",children:"Has Arrow"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"hasArrow"})," boolean to add an arrow to the popover."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover hasArrow>Popover with arrow</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"is-open",children:"Is Open"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"isOpen"})," boolean to control the visibility of the popover."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover isOpen={true}>Popover with arrow</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"flip",children:"Flip"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"flip"})," boolean to flip the popover to the opposite side of the reference element if there is not enough space.\nFor ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverPosition.Auto"})," this will become true."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover flip={true}>Flip demo</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"prevent-overflow",children:"Prevent Overflow"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"preventOverflow"})," boolean to prevent the popover from overflowing the viewport.\nFor ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverPosition.Auto"})," this will become true."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover preventOverflow={true}>Prevent overflow demo</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"reference-hidden",children:"Reference Hidden"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"referenceHidden"})," boolean to hide the Popover when the reference element is no longer visible in the viewport."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover referenceHidden={true}>Reference hidden demo</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"match-width",children:"Match Width"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"matchWidth"})," boolean to match the width of the popover to the reference element."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover matchWidth={true}>Match width demo</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"role",children:"Role"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"role"})," prop with ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverRole"})," enum to set the role of the popover.\n",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverRole.Dialog"})," if the content is interactive, or ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverRole.Tooltip"})," for purely informational popovers."]}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Default: ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverRole.Tooltip"})]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover, PopoverRole } from '../../ui/component-library';\n\n<Popover role={PopoverRole.Tooltip}>PopoverRole.Tooltip</Popover>;\n<Popover role={PopoverRole.Dialog}>PopoverRole.Dialog</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"offset",children:"Offset"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Use the ",(0,jsx_runtime.jsx)(_components.code,{children:"offset"})," prop to pass an array of two numbers to offset the popover from the reference element.\nDefault is ",(0,jsx_runtime.jsx)(_components.code,{children:"[0, 8]"}),"\nFirst number controls the skidding offset and the second number controls the distance offset."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover offset={[0, 32]}>offset override to [0,32]</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"on-press-esc-key",children:"On Press Esc Key"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:[(0,jsx_runtime.jsx)(_components.code,{children:"onPressEscKey"})," is a callback function that is invoked when the 'Escape' key is pressed within the ",(0,jsx_runtime.jsx)(_components.code,{children:"Popover"})," component"]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\nconst [isOpen, setIsOpen] = useState(false);\n\nconst handleClick = () => {\n  setIsOpen(!isOpen);\n};\n\n<Popover onPressEscKey={() => setIsOpen(false)}>\n  Press esc key to close\n</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-popoverheader",children:"With PopoverHeader"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Using the ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverHeader"})," component to add a header to the ",(0,jsx_runtime.jsx)(_components.code,{children:"Popover"})," component. The ",(0,jsx_runtime.jsx)(_components.code,{children:"PopoverHeader"})," is used to show common elements such as title, back button, and close button."]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\n<Popover>\n  <PopoverHeader\n    onClose={() => console.log('close')}\n    onBack={() => console.log('back')}\n  >\n    Popover Title\n  </PopoverHeader>\n  Title should be short and concise. It should be sentence case and no period.\n</Popover>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"mouse-event-demo",children:"Mouse Event Demo"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Not built into the ",(0,jsx_runtime.jsx)(_components.code,{children:"Popover"})," component, but a demo of ",(0,jsx_runtime.jsx)(_components.code,{children:"onMouseEnter"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"onMouseLeave"})," events on the reference element to control the visibility of the popover"]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\nconst [isOpen, setIsOpen] = useState(false);\n\nconst handleMouseEnter = () => {\n  setIsOpen(true);\n};\n\nconst handleMouseLeave = () => {\n  setIsOpen(false);\n};\n\n<>\n  <Box onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n    Hover\n  </Box>\n  <Popover isOpen={isOpen}>onMouseEnter and onMouseLeave</Popover>\n</>;\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"on-focusblur-demo",children:"On Focus/Blur Demo"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["Not built into the ",(0,jsx_runtime.jsx)(_components.code,{children:"Popover"})," component, but a demo of ",(0,jsx_runtime.jsx)(_components.code,{children:"onFocus"})," and ",(0,jsx_runtime.jsx)(_components.code,{children:"onBlur"})," events on the reference element to control the visibility of the popover"]}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:"import { Popover } from '../../ui/component-library';\n\nconst [isOpen, setIsOpen] = useState(false);\n\n// Example of how open popover with focus and pair with onBlur to close popover\nconst handleFocus = () => {\n  setIsOpen(true);\n};\n\nconst handleClose = () => {\n  setIsOpen(false);\n};\n\n<>\n  <Box onFocus={handleFocus} onBlur={handleClose} as=\"button\">\n    Focus to open\n  </Box>\n  <Popover>onFocus to open and onBlur to close</Popover>\n</>;\n"})})]})}const README=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)};var _DefaultStory$paramet,_DefaultStory$paramet2,_DefaultStory$paramet3,_ReferenceElement$par,_ReferenceElement$par2,_ReferenceElement$par3,_Children$parameters,_Children$parameters2,_Children$parameters3,_Position$parameters,_Position$parameters2,_Position$parameters3,_IsPortal$parameters,_IsPortal$parameters2,_IsPortal$parameters3,_HasArrow$parameters,_HasArrow$parameters2,_HasArrow$parameters3,_IsOpen$parameters,_IsOpen$parameters2,_IsOpen$parameters2$d,_Flip$parameters,_Flip$parameters2,_Flip$parameters2$doc,_PreventOverflow$para,_PreventOverflow$para2,_PreventOverflow$para3,_ReferenceHidden$para,_ReferenceHidden$para2,_ReferenceHidden$para3,_MatchWidth$parameter,_MatchWidth$parameter2,_MatchWidth$parameter3,_Role$parameters,_Role$parameters2,_Role$parameters2$doc,_Offset$parameters,_Offset$parameters2,_Offset$parameters2$d,_OnPressEscKey$parame,_OnPressEscKey$parame2,_OnPressEscKey$parame3,_WithPopoverHeader$pa,_WithPopoverHeader$pa2,_WithPopoverHeader$pa3,_MouseEventDemo$param,_MouseEventDemo$param2,_MouseEventDemo$param3,_OnFocusBlur$paramete,_OnFocusBlur$paramete2,_OnFocusBlur$paramete3,component_library_popover=__webpack_require__("./ui/components/component-library/popover/index.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const popover_stories={title:"Components/ComponentLibrary/Popover",component:component_library_popover.J2,parameters:{docs:{page:README}},argTypes:{children:{control:"text"},position:{options:component_library_popover.I2,control:"select"},role:{options:component_library_popover.RM,control:"select"},className:{control:"text"}},args:{children:"Popover"}},DefaultStory=(args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!0),handleKeyDown=e=>{"Escape"===e.key&&setIsOpen(!1)};(0,react.useEffect)((()=>{isOpen?document.addEventListener("keydown",handleKeyDown):document.removeEventListener("keydown",handleKeyDown)}),[isOpen]);return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},onClick:()=>{setIsOpen(!isOpen)},backgroundColor:design_system.lP.primaryAlternative,style:{width:200,height:200},color:design_system.Il.primaryInverse,as:"button"},"Click to toggle popover"),react.createElement(component_library_popover.J2,_extends({referenceElement,isOpen},args)))}).bind({});DefaultStory.storyName="Default",DefaultStory.args={position:component_library_popover.I2.BottomStart,children:"Popover demo without PopoverHeader",isPortal:!1,hasArrow:!0};const ReferenceElement=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200}}),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Bottom,referenceElement,isOpen:!0,hasArrow:!0},args),react.createElement(component_library.xv,null,"Reference Element")))},Children=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200}}),react.createElement(component_library_popover.J2,_extends({referenceElement,isOpen:!0,hasArrow:!0},args),react.createElement(component_library.xv,null,"Demo of popover with children."," ",react.createElement(component_library.JO,{size:component_library.Jh.Inherit,name:component_library.uH.Info}))))},Position=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[referenceAutoElement,setReferenceAutoElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{style:{width:"90vw",minWidth:"650px",height:"90vh",minHeight:"400px"},borderColor:design_system.kf.borderDefault,display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,marginBottom:4},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:400,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Position"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.TopStart,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.TopStart),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Top,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.Top),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.TopEnd,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.TopEnd),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightStart,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.RightStart),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Right,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.Right),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightEnd,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.RightEnd),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.BottomStart,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.BottomStart),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Bottom,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.Bottom),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.BottomEnd,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.BottomEnd),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.LeftStart,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.LeftStart),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Left,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.Left),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.LeftEnd,referenceElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.LeftEnd)),react.createElement(box.ZP,{style:{width:"90vw",minWidth:"650px",height:"90vh",minHeight:"400px",overflow:"scroll"},borderColor:design_system.kf.borderDefault},react.createElement(box.ZP,{style:{width:"200vw",height:"200vh"},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center},react.createElement(box.ZP,{ref:ref=>{setReferenceAutoElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:400,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Position"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Auto,referenceElement:referenceAutoElement,isOpen:!0,hasArrow:!0},args),component_library_popover.I2.Auto))))},IsPortal=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200}}),react.createElement(component_library_popover.J2,_extends({referenceElement,position:component_library_popover.I2.RightEnd,isOpen:!0,isPortal:!0,hasArrow:!0},args),react.createElement(component_library.xv,null,"Inspect to view the popover in the DOM (isPortal true)")),react.createElement(component_library_popover.J2,_extends({referenceElement,position:component_library_popover.I2.RightStart,isOpen:!0,isPortal:!1,hasArrow:!0},args),react.createElement(component_library.xv,null,"Inspect to view the popover in the DOM (isPortal false)")))},HasArrow=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200}}),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightStart,referenceElement,isOpen:!0,hasArrow:!0},args),react.createElement(component_library.xv,null,"Popover with arrow")),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightEnd,referenceElement,isOpen:!0},args),react.createElement(component_library.xv,null,"Popover with no arrow")))},IsOpen=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!0);return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},onClick:()=>{setIsOpen(!isOpen)},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center},"Click to toggle popover"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightStart,referenceElement,isOpen:!0,hasArrow:!0},args),react.createElement(component_library.xv,null,"isOpen always true")),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.RightEnd,referenceElement,hasArrow:!0,isOpen},args),react.createElement(component_library.xv,null,"isOpen tied to boolean")))},Flip=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(box.ZP,{style:{height:"200vh"},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center},"Scroll to see popover flip"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.TopStart,referenceElement,isOpen:!0,hasArrow:!0},args),"false"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.TopEnd,referenceElement,hasArrow:!0,flip:!0,isOpen:!0},args),"true"))},PreventOverflow=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(box.ZP,{style:{height:"200vh",width:"100vw"},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Scroll to see popover preventOverflow"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Left,referenceElement,isOpen:!0,hasArrow:!0},args),"false"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Right,referenceElement,hasArrow:!0,preventOverflow:!0,isOpen:!0},args),"true"))},ReferenceHidden=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(box.ZP,{style:{height:"200vh",width:"100vw"},display:design_system.sS.Flex,justifyContent:design_system.E0.center},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Scroll to see popover referenceHidden"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.BottomStart,referenceElement,isOpen:!0,referenceHidden:!1,hasArrow:!0},args),react.createElement(component_library.xv,null,"false")),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.BottomEnd,referenceElement,hasArrow:!0,isOpen:!0},args),react.createElement(component_library.xv,null,"true")))},MatchWidth=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200}}),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Bottom,referenceElement,isOpen:!0,matchWidth:!0},args),react.createElement(component_library.xv,null,"Setting matchWidth to true will make the popover match the width of the reference element")))},Role=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(box.ZP,{style:{height:"100vh",width:"100vw"},display:design_system.sS.Flex,justifyContent:design_system.E0.center},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Inspect to view role"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Left,role:component_library_popover.RM.Dialog,referenceElement,isOpen:!0},args),react.createElement(component_library.xv,null,component_library_popover.RM.Dialog)),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Right,role:component_library_popover.RM.Tooltip,referenceElement,isOpen:!0},args),react.createElement(component_library.xv,null,component_library_popover.RM.Tooltip)))},Offset=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)();return react.createElement(box.ZP,{style:{height:"200vh",width:"100vw"},display:design_system.sS.Flex,justifyContent:design_system.E0.center},react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},backgroundColor:design_system.lP.primaryMuted,style:{width:200,height:200},display:design_system.sS.Flex,justifyContent:design_system.E0.center,alignItems:design_system.g1.center,textAlign:design_system.PH.Center},"Offset Demo"),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Left,referenceElement,isOpen:!0},args),react.createElement(component_library.xv,null,"offset default")),react.createElement(component_library_popover.J2,_extends({position:component_library_popover.I2.Right,referenceElement,isOpen:!0,offset:[0,32]},args),react.createElement(component_library.xv,null,"offset override to [0,32]")))},OnPressEscKey=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!1);return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},onClick:()=>{setIsOpen(!isOpen)},backgroundColor:design_system.lP.primaryAlternative,style:{width:200,height:200},color:design_system.Il.primaryInverse,as:"button"},"Click to open"),react.createElement(component_library_popover.J2,_extends({referenceElement,onPressEscKey:()=>setIsOpen(!1),isOpen},args),"Press esc key to close"))},WithPopoverHeader=args=>{const[refTitleElement,setRefTitleElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!0),handleClick=()=>{setIsOpen(!isOpen)};return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setRefTitleElement(ref)},backgroundColor:design_system.lP.primaryDefault,style:{width:200,height:200},onClick:handleClick}),react.createElement(component_library_popover.J2,_extends({referenceElement:refTitleElement,isOpen,hasArrow:!0},args),react.createElement(component_library.Yt,{onClose:handleClick,onBack:()=>console.log("back"),color:design_system.Il.inherit,marginBottom:4},"Popover Title"),"Title should be short and concise. It should be sentence case and no period."))},MouseEventDemo=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!1);return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},onMouseEnter:()=>{setIsOpen(!0)},onMouseLeave:()=>{setIsOpen(!1)},backgroundColor:design_system.lP.primaryAlternative,style:{width:200,height:200},color:design_system.Il.primaryInverse},"Hover"),react.createElement(component_library_popover.J2,_extends({referenceElement,isOpen},args),"onMouseEnter and onMouseLeave"))},OnFocusBlur=args=>{const[referenceElement,setReferenceElement]=(0,react.useState)(),[isOpen,setIsOpen]=(0,react.useState)(!1);return react.createElement(react.Fragment,null,react.createElement(box.ZP,{ref:ref=>{setReferenceElement(ref)},onFocus:()=>{setIsOpen(!0)},onBlur:()=>{setIsOpen(!1)},backgroundColor:design_system.lP.primaryAlternative,style:{width:200,height:200},color:design_system.Il.primaryInverse,as:"button"},"Focus to open"),react.createElement(component_library_popover.J2,_extends({referenceElement,isOpen},args),"onFocus to open and onBlur to close"))};DefaultStory.parameters={...DefaultStory.parameters,docs:{...null===(_DefaultStory$paramet=DefaultStory.parameters)||void 0===_DefaultStory$paramet?void 0:_DefaultStory$paramet.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [isOpen, setIsOpen] = useState(true);\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Escape') {\n      setIsOpen(false);\n    }\n  };\n\n  // Example of how to use keyboard events to close popover with escape key\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    } else {\n      document.removeEventListener('keydown', handleKeyDown);\n    }\n  }, [isOpen]);\n\n  // Example of how to use ref to open popover\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} onClick={handleClick} backgroundColor={BackgroundColor.primaryAlternative} style={{\n      width: 200,\n      height: 200\n    }} color={Color.primaryInverse} as=\"button\">\n        Click to toggle popover\n      </Box>\n      <Popover referenceElement={referenceElement} isOpen={isOpen} {...args} />\n    </>;\n}",...null===(_DefaultStory$paramet2=DefaultStory.parameters)||void 0===_DefaultStory$paramet2||null===(_DefaultStory$paramet3=_DefaultStory$paramet2.docs)||void 0===_DefaultStory$paramet3?void 0:_DefaultStory$paramet3.source}}},ReferenceElement.parameters={...ReferenceElement.parameters,docs:{...null===(_ReferenceElement$par=ReferenceElement.parameters)||void 0===_ReferenceElement$par?void 0:_ReferenceElement$par.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} />\n      <Popover position={PopoverPosition.Bottom} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        <Text>Reference Element</Text>\n      </Popover>\n    </>;\n}",...null===(_ReferenceElement$par2=ReferenceElement.parameters)||void 0===_ReferenceElement$par2||null===(_ReferenceElement$par3=_ReferenceElement$par2.docs)||void 0===_ReferenceElement$par3?void 0:_ReferenceElement$par3.source}}},Children.parameters={...Children.parameters,docs:{...null===(_Children$parameters=Children.parameters)||void 0===_Children$parameters?void 0:_Children$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} />\n      <Popover referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        <Text>\n          Demo of popover with children.{' '}\n          <Icon size={IconSize.Inherit} name={IconName.Info} />\n        </Text>\n      </Popover>\n    </>;\n}",...null===(_Children$parameters2=Children.parameters)||void 0===_Children$parameters2||null===(_Children$parameters3=_Children$parameters2.docs)||void 0===_Children$parameters3?void 0:_Children$parameters3.source}}},Position.parameters={...Position.parameters,docs:{...null===(_Position$parameters=Position.parameters)||void 0===_Position$parameters?void 0:_Position$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [referenceAutoElement, setReferenceAutoElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  const setRefAuto = ref => {\n    setReferenceAutoElement(ref);\n  };\n  return <>\n      <Box style={{\n      width: '90vw',\n      minWidth: '650px',\n      height: '90vh',\n      minHeight: '400px'\n    }} borderColor={BorderColor.borderDefault} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} marginBottom={4}>\n        <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n        width: 400,\n        height: 200\n      }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n          Position\n        </Box>\n        <Popover position={PopoverPosition.TopStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.TopStart}\n        </Popover>\n        <Popover position={PopoverPosition.Top} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.Top}\n        </Popover>\n        <Popover position={PopoverPosition.TopEnd} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.TopEnd}\n        </Popover>\n        <Popover position={PopoverPosition.RightStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.RightStart}\n        </Popover>\n        <Popover position={PopoverPosition.Right} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.Right}\n        </Popover>\n        <Popover position={PopoverPosition.RightEnd} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.RightEnd}\n        </Popover>\n        <Popover position={PopoverPosition.BottomStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.BottomStart}\n        </Popover>\n        <Popover position={PopoverPosition.Bottom} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.Bottom}\n        </Popover>\n        <Popover position={PopoverPosition.BottomEnd} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.BottomEnd}\n        </Popover>\n        <Popover position={PopoverPosition.LeftStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.LeftStart}\n        </Popover>\n        <Popover position={PopoverPosition.Left} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.Left}\n        </Popover>\n        <Popover position={PopoverPosition.LeftEnd} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n          {PopoverPosition.LeftEnd}\n        </Popover>\n      </Box>\n      <Box style={{\n      width: '90vw',\n      minWidth: '650px',\n      height: '90vh',\n      minHeight: '400px',\n      overflow: 'scroll'\n    }} borderColor={BorderColor.borderDefault}>\n        <Box style={{\n        width: '200vw',\n        height: '200vh'\n      }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center}>\n          <Box ref={setRefAuto} backgroundColor={BackgroundColor.primaryMuted} style={{\n          width: 400,\n          height: 200\n        }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n            Position\n          </Box>\n          <Popover position={PopoverPosition.Auto} referenceElement={referenceAutoElement} isOpen={true} hasArrow {...args}>\n            {PopoverPosition.Auto}\n          </Popover>\n        </Box>\n      </Box>\n    </>;\n}",...null===(_Position$parameters2=Position.parameters)||void 0===_Position$parameters2||null===(_Position$parameters3=_Position$parameters2.docs)||void 0===_Position$parameters3?void 0:_Position$parameters3.source}}},IsPortal.parameters={...IsPortal.parameters,docs:{...null===(_IsPortal$parameters=IsPortal.parameters)||void 0===_IsPortal$parameters?void 0:_IsPortal$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} />\n      <Popover referenceElement={referenceElement} position={PopoverPosition.RightEnd} isOpen={true} isPortal={true} hasArrow {...args}>\n        <Text>Inspect to view the popover in the DOM (isPortal true)</Text>\n      </Popover>\n      <Popover referenceElement={referenceElement} position={PopoverPosition.RightStart} isOpen={true} isPortal={false} hasArrow {...args}>\n        <Text>Inspect to view the popover in the DOM (isPortal false)</Text>\n      </Popover>\n    </>;\n}",...null===(_IsPortal$parameters2=IsPortal.parameters)||void 0===_IsPortal$parameters2||null===(_IsPortal$parameters3=_IsPortal$parameters2.docs)||void 0===_IsPortal$parameters3?void 0:_IsPortal$parameters3.source}}},HasArrow.parameters={...HasArrow.parameters,docs:{...null===(_HasArrow$parameters=HasArrow.parameters)||void 0===_HasArrow$parameters?void 0:_HasArrow$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} />\n      <Popover position={PopoverPosition.RightStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        <Text>Popover with arrow</Text>\n      </Popover>\n      <Popover position={PopoverPosition.RightEnd} referenceElement={referenceElement} isOpen={true} {...args}>\n        <Text>Popover with no arrow</Text>\n      </Popover>\n    </>;\n}",...null===(_HasArrow$parameters2=HasArrow.parameters)||void 0===_HasArrow$parameters2||null===(_HasArrow$parameters3=_HasArrow$parameters2.docs)||void 0===_HasArrow$parameters3?void 0:_HasArrow$parameters3.source}}},IsOpen.parameters={...IsOpen.parameters,docs:{...null===(_IsOpen$parameters=IsOpen.parameters)||void 0===_IsOpen$parameters?void 0:_IsOpen$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [isOpen, setIsOpen] = useState(true);\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} onClick={handleClick} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center}>\n        Click to toggle popover\n      </Box>\n\n      <Popover position={PopoverPosition.RightStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        <Text>isOpen always true</Text>\n      </Popover>\n\n      <Popover position={PopoverPosition.RightEnd} referenceElement={referenceElement} hasArrow isOpen={isOpen} {...args}>\n        <Text>isOpen tied to boolean</Text>\n      </Popover>\n    </>;\n}",...null===(_IsOpen$parameters2=IsOpen.parameters)||void 0===_IsOpen$parameters2||null===(_IsOpen$parameters2$d=_IsOpen$parameters2.docs)||void 0===_IsOpen$parameters2$d?void 0:_IsOpen$parameters2$d.source}}},Flip.parameters={...Flip.parameters,docs:{...null===(_Flip$parameters=Flip.parameters)||void 0===_Flip$parameters?void 0:_Flip$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <Box style={{\n    height: '200vh'\n  }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center}>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center}>\n        Scroll to see popover flip\n      </Box>\n      <Popover position={PopoverPosition.TopStart} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        false\n      </Popover>\n      <Popover position={PopoverPosition.TopEnd} referenceElement={referenceElement} hasArrow flip isOpen={true} {...args}>\n        true\n      </Popover>\n    </Box>;\n}",...null===(_Flip$parameters2=Flip.parameters)||void 0===_Flip$parameters2||null===(_Flip$parameters2$doc=_Flip$parameters2.docs)||void 0===_Flip$parameters2$doc?void 0:_Flip$parameters2$doc.source}}},PreventOverflow.parameters={...PreventOverflow.parameters,docs:{...null===(_PreventOverflow$para=PreventOverflow.parameters)||void 0===_PreventOverflow$para?void 0:_PreventOverflow$para.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <Box style={{\n    height: '200vh',\n    width: '100vw'\n  }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center}>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n        Scroll to see popover preventOverflow\n      </Box>\n      <Popover position={PopoverPosition.Left} referenceElement={referenceElement} isOpen={true} hasArrow {...args}>\n        false\n      </Popover>\n      <Popover position={PopoverPosition.Right} referenceElement={referenceElement} hasArrow preventOverflow isOpen={true} {...args}>\n        true\n      </Popover>\n    </Box>;\n}",...null===(_PreventOverflow$para2=PreventOverflow.parameters)||void 0===_PreventOverflow$para2||null===(_PreventOverflow$para3=_PreventOverflow$para2.docs)||void 0===_PreventOverflow$para3?void 0:_PreventOverflow$para3.source}}},ReferenceHidden.parameters={...ReferenceHidden.parameters,docs:{...null===(_ReferenceHidden$para=ReferenceHidden.parameters)||void 0===_ReferenceHidden$para?void 0:_ReferenceHidden$para.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <Box style={{\n    height: '200vh',\n    width: '100vw'\n  }} display={Display.Flex} justifyContent={JustifyContent.center}>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n        Scroll to see popover referenceHidden\n      </Box>\n      <Popover position={PopoverPosition.BottomStart} referenceElement={referenceElement} isOpen={true} referenceHidden={false} hasArrow {...args}>\n        <Text>false</Text>\n      </Popover>\n      <Popover position={PopoverPosition.BottomEnd} referenceElement={referenceElement} hasArrow isOpen={true} {...args}>\n        <Text>true</Text>\n      </Popover>\n    </Box>;\n}",...null===(_ReferenceHidden$para2=ReferenceHidden.parameters)||void 0===_ReferenceHidden$para2||null===(_ReferenceHidden$para3=_ReferenceHidden$para2.docs)||void 0===_ReferenceHidden$para3?void 0:_ReferenceHidden$para3.source}}},MatchWidth.parameters={...MatchWidth.parameters,docs:{...null===(_MatchWidth$parameter=MatchWidth.parameters)||void 0===_MatchWidth$parameter?void 0:_MatchWidth$parameter.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} />\n      <Popover position={PopoverPosition.Bottom} referenceElement={referenceElement} isOpen={true} matchWidth {...args}>\n        <Text>\n          Setting matchWidth to true will make the popover match the width of\n          the reference element\n        </Text>\n      </Popover>\n    </>;\n}",...null===(_MatchWidth$parameter2=MatchWidth.parameters)||void 0===_MatchWidth$parameter2||null===(_MatchWidth$parameter3=_MatchWidth$parameter2.docs)||void 0===_MatchWidth$parameter3?void 0:_MatchWidth$parameter3.source}}},Role.parameters={...Role.parameters,docs:{...null===(_Role$parameters=Role.parameters)||void 0===_Role$parameters?void 0:_Role$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <Box style={{\n    height: '100vh',\n    width: '100vw'\n  }} display={Display.Flex} justifyContent={JustifyContent.center}>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n        Inspect to view role\n      </Box>\n      <Popover position={PopoverPosition.Left} role={PopoverRole.Dialog} referenceElement={referenceElement} isOpen={true} {...args}>\n        <Text>{PopoverRole.Dialog}</Text>\n      </Popover>\n      <Popover position={PopoverPosition.Right} role={PopoverRole.Tooltip} referenceElement={referenceElement} isOpen={true} {...args}>\n        <Text>{PopoverRole.Tooltip}</Text>\n      </Popover>\n    </Box>;\n}",...null===(_Role$parameters2=Role.parameters)||void 0===_Role$parameters2||null===(_Role$parameters2$doc=_Role$parameters2.docs)||void 0===_Role$parameters2$doc?void 0:_Role$parameters2$doc.source}}},Offset.parameters={...Offset.parameters,docs:{...null===(_Offset$parameters=Offset.parameters)||void 0===_Offset$parameters?void 0:_Offset$parameters.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  return <Box style={{\n    height: '200vh',\n    width: '100vw'\n  }} display={Display.Flex} justifyContent={JustifyContent.center}>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryMuted} style={{\n      width: 200,\n      height: 200\n    }} display={Display.Flex} justifyContent={JustifyContent.center} alignItems={AlignItems.center} textAlign={TextAlign.Center}>\n        Offset Demo\n      </Box>\n      <Popover position={PopoverPosition.Left} referenceElement={referenceElement} isOpen={true} {...args}>\n        <Text>offset default</Text>\n      </Popover>\n      <Popover position={PopoverPosition.Right} referenceElement={referenceElement} isOpen={true} offset={[0, 32]} {...args}>\n        <Text>offset override to [0,32]</Text>\n      </Popover>\n    </Box>;\n}",...null===(_Offset$parameters2=Offset.parameters)||void 0===_Offset$parameters2||null===(_Offset$parameters2$d=_Offset$parameters2.docs)||void 0===_Offset$parameters2$d?void 0:_Offset$parameters2$d.source}}},OnPressEscKey.parameters={...OnPressEscKey.parameters,docs:{...null===(_OnPressEscKey$parame=OnPressEscKey.parameters)||void 0===_OnPressEscKey$parame?void 0:_OnPressEscKey$parame.docs,source:{originalSource:'args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Set Popover Ref\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n  return <>\n      <Box ref={setBoxRef} onClick={handleClick} backgroundColor={BackgroundColor.primaryAlternative} style={{\n      width: 200,\n      height: 200\n    }} color={Color.primaryInverse} as="button">\n        Click to open\n      </Box>\n      <Popover referenceElement={referenceElement} onPressEscKey={() => setIsOpen(false)} isOpen={isOpen} {...args}>\n        Press esc key to close\n      </Popover>\n    </>;\n}',...null===(_OnPressEscKey$parame2=OnPressEscKey.parameters)||void 0===_OnPressEscKey$parame2||null===(_OnPressEscKey$parame3=_OnPressEscKey$parame2.docs)||void 0===_OnPressEscKey$parame3?void 0:_OnPressEscKey$parame3.source}}},WithPopoverHeader.parameters={...WithPopoverHeader.parameters,docs:{...null===(_WithPopoverHeader$pa=WithPopoverHeader.parameters)||void 0===_WithPopoverHeader$pa?void 0:_WithPopoverHeader$pa.docs,source:{originalSource:"args => {\n  const [refTitleElement, setRefTitleElement] = useState();\n  const [isOpen, setIsOpen] = useState(true);\n  const handleClick = () => {\n    setIsOpen(!isOpen);\n  };\n  const setBoxRef = ref => {\n    setRefTitleElement(ref);\n  };\n  return <>\n      <Box ref={setBoxRef} backgroundColor={BackgroundColor.primaryDefault} style={{\n      width: 200,\n      height: 200\n    }} onClick={handleClick} />\n      <Popover referenceElement={refTitleElement} isOpen={isOpen} hasArrow {...args}>\n        <PopoverHeader onClose={handleClick} onBack={() => console.log('back')} color={Color.inherit} marginBottom={4}>\n          Popover Title\n        </PopoverHeader>\n        Title should be short and concise. It should be sentence case and no\n        period.\n      </Popover>\n    </>;\n}",...null===(_WithPopoverHeader$pa2=WithPopoverHeader.parameters)||void 0===_WithPopoverHeader$pa2||null===(_WithPopoverHeader$pa3=_WithPopoverHeader$pa2.docs)||void 0===_WithPopoverHeader$pa3?void 0:_WithPopoverHeader$pa3.source}}},MouseEventDemo.parameters={...MouseEventDemo.parameters,docs:{...null===(_MouseEventDemo$param=MouseEventDemo.parameters)||void 0===_MouseEventDemo$param?void 0:_MouseEventDemo$param.docs,source:{originalSource:"args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Set Popover Ref\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n\n  // Example of how to use mouse events to open and close popover\n  const handleMouseEnter = () => {\n    setIsOpen(true);\n  };\n  const handleMouseLeave = () => {\n    setIsOpen(false);\n  };\n  return <>\n      <Box ref={setBoxRef} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} backgroundColor={BackgroundColor.primaryAlternative} style={{\n      width: 200,\n      height: 200\n    }} color={Color.primaryInverse}>\n        Hover\n      </Box>\n      <Popover referenceElement={referenceElement} isOpen={isOpen} {...args}>\n        onMouseEnter and onMouseLeave\n      </Popover>\n    </>;\n}",...null===(_MouseEventDemo$param2=MouseEventDemo.parameters)||void 0===_MouseEventDemo$param2||null===(_MouseEventDemo$param3=_MouseEventDemo$param2.docs)||void 0===_MouseEventDemo$param3?void 0:_MouseEventDemo$param3.source}}},OnFocusBlur.parameters={...OnFocusBlur.parameters,docs:{...null===(_OnFocusBlur$paramete=OnFocusBlur.parameters)||void 0===_OnFocusBlur$paramete?void 0:_OnFocusBlur$paramete.docs,source:{originalSource:'args => {\n  const [referenceElement, setReferenceElement] = useState();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Set Popover Ref\n  const setBoxRef = ref => {\n    setReferenceElement(ref);\n  };\n\n  // Example of how open popover with focus and pair with onBlur to close popover\n  const handleFocus = () => {\n    setIsOpen(true);\n  };\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n  return <>\n      <Box ref={setBoxRef} onFocus={handleFocus} onBlur={handleClose} backgroundColor={BackgroundColor.primaryAlternative} style={{\n      width: 200,\n      height: 200\n    }} color={Color.primaryInverse} as="button">\n        Focus to open\n      </Box>\n      <Popover referenceElement={referenceElement} isOpen={isOpen} {...args}>\n        onFocus to open and onBlur to close\n      </Popover>\n    </>;\n}',...null===(_OnFocusBlur$paramete2=OnFocusBlur.parameters)||void 0===_OnFocusBlur$paramete2||null===(_OnFocusBlur$paramete3=_OnFocusBlur$paramete2.docs)||void 0===_OnFocusBlur$paramete3?void 0:_OnFocusBlur$paramete3.source}}};const __namedExportsOrder=["DefaultStory","ReferenceElement","Children","Position","IsPortal","HasArrow","IsOpen","Flip","PreventOverflow","ReferenceHidden","MatchWidth","Role","Offset","OnPressEscKey","WithPopoverHeader","MouseEventDemo","OnFocusBlur"]},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{var f=__webpack_require__("./node_modules/react/index.js"),g=60103;if(exports.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var h=Symbol.for;g=h("react.element"),exports.Fragment=h("react.fragment")}var m=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n=Object.prototype.hasOwnProperty,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,k){var b,d={},e=null,l=null;for(b in void 0!==k&&(e=""+k),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(l=a.ref),a)n.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:g,type:c,key:e,ref:l,props:d,_owner:m.current}}exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);