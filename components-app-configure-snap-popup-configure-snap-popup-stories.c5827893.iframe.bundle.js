"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[1290],{"./ui/components/app/configure-snap-popup/configure-snap-popup.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Configure:()=>Configure,Install:()=>Install,__namedExportsOrder:()=>__namedExportsOrder,default:()=>configure_snap_popup_stories});var react=__webpack_require__("./node_modules/react/index.js"),external_STORYBOOK_MODULE_CLIENT_API_=__webpack_require__("@storybook/client-api"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),deprecated=__webpack_require__("./ui/components/component-library/modal-content/deprecated/index.ts"),modal_header_deprecated=__webpack_require__("./ui/components/component-library/modal-header/deprecated/index.ts"),useI18nContext=__webpack_require__("./ui/hooks/useI18nContext.js"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts");let ConfigureSnapPopupType=function(ConfigureSnapPopupType){return ConfigureSnapPopupType.CONFIGURE="configure",ConfigureSnapPopupType.INSTALL="install",ConfigureSnapPopupType}({});function ConfigureSnapPopup({type,isOpen,onClose,link}){const t=(0,useI18nContext.C)();return react.createElement(component_library.u_,{isOpen,onClose},react.createElement(component_library.ZA,null),react.createElement(deprecated.h,null,react.createElement(modal_header_deprecated.x,{onClose,marginBottom:4},type===ConfigureSnapPopupType.CONFIGURE?t("configureSnapPopupTitle"):t("configureSnapPopupInstallTitle")),react.createElement(component_library.xu,{display:design_system.sS.Flex,flexDirection:design_system.Qb.Column,justifyContent:design_system.E0.flexStart,alignItems:design_system.g1.center},react.createElement("img",{src:"images/logo/metamask-fox.svg",width:"54x",height:"50px",style:{marginBottom:"16px"}}),react.createElement(component_library.xv,{variant:design_system.rK.bodyLgMedium,textAlign:design_system.PH.Center,marginBottom:5},type===ConfigureSnapPopupType.CONFIGURE?t("configureSnapPopupDescription"):t("configureSnapPopupInstallDescription")),react.createElement(component_library.xv,{variant:design_system.rK.bodyLgMedium,marginBottom:4},t("configureSnapPopupLink")),react.createElement(component_library.zx,{variant:component_library.Wu.Link,marginBottom:8,onClick:()=>{__webpack_require__.g.platform.openTab({url:link})}},link))))}ConfigureSnapPopup.propTypes={type:prop_types_default().oneOf([ConfigureSnapPopupType.CONFIGURE,ConfigureSnapPopupType.INSTALL]).isRequired,isOpen:prop_types_default().bool.isRequired,onClose:prop_types_default().func.isRequired,link:prop_types_default().string.isRequired};try{configuresnappopup.displayName="configuresnappopup",configuresnappopup.__docgenInfo={description:"",displayName:"configuresnappopup",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"enum",value:[{value:'"configure"'},{value:'"install"'}]}},isOpen:{defaultValue:null,description:"",name:"isOpen",required:!0,type:{name:"boolean"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!0,type:{name:"() => void"}},link:{defaultValue:null,description:"",name:"link",required:!0,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["ui/components/app/configure-snap-popup/configure-snap-popup.tsx#configuresnappopup"]={docgenInfo:configuresnappopup.__docgenInfo,name:"configuresnappopup",path:"ui/components/app/configure-snap-popup/configure-snap-popup.tsx#configuresnappopup"})}catch(__react_docgen_typescript_loader_error){}var _Configure$parameters,_Configure$parameters2,_Install$parameters,_Install$parameters2;function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}const configure_snap_popup_stories={title:"Components/App/ConfigureSnapPopup",component:ConfigureSnapPopup,argTypes:{type:{control:{type:"select",options:[ConfigureSnapPopupType.CONFIGURE,ConfigureSnapPopupType.INSTALL]}},isOpen:{control:{type:"boolean"}},onClose:{action:"onClose"},link:{control:{type:"text"}}},args:{type:ConfigureSnapPopupType.CONFIGURE,link:"https://metamask.io"}},Configure={args:{type:ConfigureSnapPopupType.CONFIGURE},render:args=>{const[{isOpen},updateArgs]=(0,external_STORYBOOK_MODULE_CLIENT_API_.useArgs)();return react.createElement("div",null,react.createElement(component_library.zx,{onClick:()=>{updateArgs({isOpen:!0})}},"Open"),react.createElement(ConfigureSnapPopup,_extends({},args,{isOpen,onClose:()=>{updateArgs({isOpen:!1})}})))}},Install={args:{type:ConfigureSnapPopupType.INSTALL},render:args=>{const[{isOpen},updateArgs]=(0,external_STORYBOOK_MODULE_CLIENT_API_.useArgs)();return react.createElement("div",null,react.createElement(component_library.zx,{onClick:()=>{updateArgs({isOpen:!0})}},"Open"),react.createElement(ConfigureSnapPopup,_extends({},args,{isOpen,onClose:()=>{updateArgs({isOpen:!1})}})))}};Configure.parameters={...Configure.parameters,docs:{...null===(_Configure$parameters=Configure.parameters)||void 0===_Configure$parameters?void 0:_Configure$parameters.docs,source:{originalSource:"{\n  args: {\n    type: ConfigureSnapPopupType.CONFIGURE\n  },\n  render: args => {\n    const [{\n      isOpen\n    }, updateArgs] = useArgs();\n    const handleClose = () => {\n      updateArgs({\n        isOpen: false\n      });\n    };\n    const handleOpen = () => {\n      updateArgs({\n        isOpen: true\n      });\n    };\n    return <div>\n        <Button onClick={handleOpen}>Open</Button>\n        <ConfigureSnapPopup {...args} isOpen={isOpen} onClose={handleClose} />\n      </div>;\n  }\n}",...null===(_Configure$parameters2=Configure.parameters)||void 0===_Configure$parameters2||null===(_Configure$parameters2=_Configure$parameters2.docs)||void 0===_Configure$parameters2?void 0:_Configure$parameters2.source}}},Install.parameters={...Install.parameters,docs:{...null===(_Install$parameters=Install.parameters)||void 0===_Install$parameters?void 0:_Install$parameters.docs,source:{originalSource:"{\n  args: {\n    type: ConfigureSnapPopupType.INSTALL\n  },\n  render: args => {\n    const [{\n      isOpen\n    }, updateArgs] = useArgs();\n    const handleClose = () => {\n      updateArgs({\n        isOpen: false\n      });\n    };\n    const handleOpen = () => {\n      updateArgs({\n        isOpen: true\n      });\n    };\n    return <div>\n        <Button onClick={handleOpen}>Open</Button>\n        <ConfigureSnapPopup {...args} isOpen={isOpen} onClose={handleClose} />\n      </div>;\n  }\n}",...null===(_Install$parameters2=Install.parameters)||void 0===_Install$parameters2||null===(_Install$parameters2=_Install$parameters2.docs)||void 0===_Install$parameters2?void 0:_Install$parameters2.source}}};const __namedExportsOrder=["Configure","Install"]}}]);