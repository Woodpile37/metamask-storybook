"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[5810],{"./ui/components/app/whats-new-popup/whats-new-popup.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultStory:()=>DefaultStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>whats_new_popup_stories});var react=__webpack_require__("./node_modules/react/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),lodash=__webpack_require__("./node_modules/lodash/lodash.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-redux/es/index.js"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),metametrics=__webpack_require__("./shared/constants/metametrics.ts"),shared_notifications=__webpack_require__("./shared/notifications/index.js"),i18n=__webpack_require__("./ui/contexts/i18n.js"),contexts_metametrics=__webpack_require__("./ui/contexts/metametrics.js"),locale_locale=__webpack_require__("./ui/ducks/locale/locale.js"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),routes=__webpack_require__("./ui/helpers/constants/routes.ts"),zendesk_url=__webpack_require__("./ui/helpers/constants/zendesk-url.js"),useEqualityCheck=__webpack_require__("./ui/hooks/useEqualityCheck.js"),selectors=__webpack_require__("./ui/selectors/index.js"),actions=__webpack_require__("./ui/store/actions.ts"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),popover=__webpack_require__("./ui/components/ui/popover/index.js");function getActionFunctionById(id,history){return{2:()=>{__webpack_require__.g.platform.openTab({url:"https://survey.alchemer.com/s3/6173069/MetaMask-Extension-NPS-January-2021"})},3:()=>{__webpack_require__.g.platform.openTab({url:"https://community.metamask.io/t/about-the-security-category/72"})},4:()=>{(0,actions.EkN)({4:!0}),history.push(routes.Pq)},5:()=>{(0,actions.EkN)({5:!0}),__webpack_require__.g.platform.openTab({url:zendesk_url.Z.SECRET_RECOVERY_PHRASE})},8:()=>{(0,actions.EkN)({8:!0}),history.push(routes.Ky)},10:()=>{(0,actions.EkN)({10:!0}),history.push(`${routes.AX}#token-description`)},12:()=>{(0,actions.EkN)({12:!0}),history.push(routes.$W)},14:()=>{(0,actions.EkN)({14:!0}),history.push(`${routes.Ky}#backup-userdata`)},16:()=>{(0,actions.EkN)({16:!0})},17:()=>{(0,actions.EkN)({17:!0})},18:()=>{(0,actions.EkN)({18:!0}),history.push(`${routes.$W}#security-alerts`)},19:()=>{(0,actions.EkN)({19:!0}),history.push(`${routes.$W}#autodetect-nfts`)},20:()=>{(0,actions.EkN)({20:!0}),__webpack_require__.g.platform.openTab({url:zendesk_url.Z.LEDGER_FIREFOX_U2F_GUIDE})},21:()=>{(0,actions.EkN)({21:!0}),history.push(routes.aZ)},22:()=>{(0,actions.EkN)({22:!0})},23:()=>{(0,actions.EkN)({23:!0}),history.push(`${routes.$W}#security-alerts`)},24:()=>{(0,actions.EkN)({24:!0})},[shared_notifications.dc]:()=>{(0,actions.EkN)({[shared_notifications.dc]:!0})},[shared_notifications.$Y]:()=>{(0,actions.EkN)({[shared_notifications.$Y]:!0}),__webpack_require__.g.platform.openTab({url:"https://metamask.io/snaps/"})},[shared_notifications.S1]:()=>{(0,actions.EkN)({[shared_notifications.S1]:!0}),__webpack_require__.g.platform.openTab({url:"https://portfolio.metamask.io/sell/build-quote"})},[shared_notifications.xr]:()=>{(0,actions.EkN)({[shared_notifications.xr]:!0})},[shared_notifications.hn]:()=>{(0,actions.EkN)({[shared_notifications.hn]:!0})}}[id]}const renderDescription=description=>Array.isArray(description)?react.createElement(react.Fragment,null,description.map(((piece,index)=>{const isLast=index===description.length-1;return react.createElement(component_library.xv,{"data-testid":`whats-new-description-item-${index}`,key:`item-${index}`,variant:design_system.rK.bodyMd,marginBottom:isLast?0:4},piece)}))):react.createElement(component_library.xv,{variant:design_system.rK.bodyMd},description),renderFirstNotification=({notification,idRefMap,history,isLast,trackEvent})=>{const{id,date,title,description,image,actionText}=notification,actionFunction=getActionFunctionById(id,history),imageComponent=image&&react.createElement("img",{className:"whats-new-popup__notification-image",src:image.src,height:image.height,width:image.width}),placeImageBelowDescription=null==image?void 0:image.placeImageBelowDescription;return react.createElement("div",{className:classnames_default()("whats-new-popup__notification whats-new-popup__first-notification",{"whats-new-popup__last-notification":isLast}),key:`whats-new-popop-notification-${id}`},react.createElement(component_library.xv,{variant:design_system.rK.bodyLgMedium,marginBottom:2},title),!placeImageBelowDescription&&imageComponent,react.createElement("div",{className:"whats-new-popup__description-and-date"},react.createElement("div",{className:"whats-new-popup__notification-description"},renderDescription(description)),react.createElement("div",{className:"whats-new-popup__notification-date"},date)),placeImageBelowDescription&&imageComponent,actionText&&react.createElement(component_library.DF,{className:"whats-new-popup__button",onClick:()=>{actionFunction(),trackEvent({category:metametrics.ci.Home,event:metametrics.AW.WhatsNewClicked})},block:!0},actionText),react.createElement("div",{className:"whats-new-popup__intersection-observable",ref:idRefMap[id]}))},renderSubsequentNotification=({notification,idRefMap,history,isLast})=>{const{id,date,title,description,actionText}=notification,actionFunction=getActionFunctionById(id,history);return react.createElement("div",{className:classnames_default()("whats-new-popup__notification",{"whats-new-popup__last-notification":isLast}),key:`whats-new-popop-notification-${id}`},react.createElement("div",{className:"whats-new-popup__notification-title"},title),react.createElement("div",{className:"whats-new-popup__description-and-date"},react.createElement("div",{className:"whats-new-popup__notification-description"},renderDescription(description)),react.createElement("div",{className:"whats-new-popup__notification-date"},date)),actionText&&react.createElement("div",{className:"whats-new-popup__link",onClick:actionFunction},`${actionText} >`),react.createElement("div",{className:"whats-new-popup__intersection-observable",ref:idRefMap[id]}))};function WhatsNewPopup({onClose}){const t=(0,react.useContext)(i18n.OO),history=(0,react_router.k6)(),notifications=(0,es.v9)(selectors.afl),locale=(0,es.v9)(locale_locale.BH),[seenNotifications,setSeenNotifications]=(0,react.useState)({}),[shouldShowScrollButton,setShouldShowScrollButton]=(0,react.useState)(!0),popoverRef=(0,react.useRef)(),memoizedNotifications=(0,useEqualityCheck.F)(notifications),idRefMap=(0,react.useMemo)((()=>memoizedNotifications.reduce(((_idRefMap,notification)=>({..._idRefMap,[notification.id]:react.createRef()})),{})),[memoizedNotifications]),trackEvent=(0,react.useContext)(contexts_metametrics.Wd),handleDebouncedScroll=(0,lodash.debounce)((target=>{setShouldShowScrollButton(target.scrollHeight-target.scrollTop!==target.clientHeight)}),100);(0,react.useEffect)((()=>{const observer=new window.IntersectionObserver(((entries,_observer)=>{entries.forEach((entry=>{if(entry.isIntersecting){const[id,ref]=Object.entries(idRefMap).find((([_,_ref])=>_ref.current.isSameNode(entry.target)));setSeenNotifications((_seenNotifications=>({..._seenNotifications,[id]:!0}))),_observer.unobserve(ref.current)}}))}),{root:popoverRef.current,threshold:1});return Object.values(idRefMap).forEach((ref=>{observer.observe(ref.current)})),()=>{observer.disconnect()}}),[idRefMap,setSeenNotifications]);const notificationRenderers={0:renderFirstNotification,1:renderFirstNotification,18:renderFirstNotification,19:renderFirstNotification,21:renderFirstNotification,22:renderFirstNotification,23:renderFirstNotification,24:renderFirstNotification,[shared_notifications.dc]:renderFirstNotification,[shared_notifications.$Y]:renderFirstNotification,[shared_notifications.S1]:renderFirstNotification,[shared_notifications.xr]:renderFirstNotification,[shared_notifications.hn]:renderFirstNotification};return react.createElement(popover.Z,{title:t("whatsNew"),headerProps:{padding:[4,4,4]},className:"whats-new-popup__popover",onClose:()=>{(0,actions.EkN)(seenNotifications),trackEvent({category:metametrics.ci.Home,event:metametrics.AW.WhatsNewViewed,properties:{number_viewed:Object.keys(seenNotifications).pop(),completed_all:!0}}),onClose()},popoverRef,showScrollDown:shouldShowScrollButton&&notifications.length>1,onScrollDownButtonClick:e=>{e.stopPropagation(),idRefMap[notifications[notifications.length-1].id].current.scrollIntoView({behavior:"smooth"})},onScroll:e=>{handleDebouncedScroll(e.target)}},react.createElement("div",{className:"whats-new-popup__notifications"},notifications.map((({id},index)=>{const notification=(0,shared_notifications.g8)(t,locale)[id],isLast=index===notifications.length-1;return(notificationRenderers[id]||renderSubsequentNotification)({notification,idRefMap,history,isLast,trackEvent})}))))}var _DefaultStory$paramet,_DefaultStory$paramet2;WhatsNewPopup.propTypes={onClose:prop_types_default().func.isRequired},WhatsNewPopup.__docgenInfo={description:"",methods:[],displayName:"WhatsNewPopup",props:{onClose:{description:"",type:{name:"func"},required:!0}}};const whats_new_popup_stories={title:"Components/Multichain/WhatsNewPopup",component:WhatsNewPopup,argTypes:{onClose:{action:"onClose"}}},DefaultStory=args=>react.createElement(WhatsNewPopup,args);DefaultStory.storyName="Default",DefaultStory.parameters={...DefaultStory.parameters,docs:{...null===(_DefaultStory$paramet=DefaultStory.parameters)||void 0===_DefaultStory$paramet?void 0:_DefaultStory$paramet.docs,source:{originalSource:"args => <WhatsNewPopup {...args} />",...null===(_DefaultStory$paramet2=DefaultStory.parameters)||void 0===_DefaultStory$paramet2||null===(_DefaultStory$paramet2=_DefaultStory$paramet2.docs)||void 0===_DefaultStory$paramet2?void 0:_DefaultStory$paramet2.source}}};const __namedExportsOrder=["DefaultStory"];DefaultStory.__docgenInfo={description:"",methods:[],displayName:"DefaultStory"}}}]);