"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[816],{"./ui/pages/confirm-send-ether/confirm-send-ether.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultStory:()=>DefaultStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>confirm_send_ether_stories});var react=__webpack_require__("./node_modules/react/index.js"),es=__webpack_require__("./node_modules/react-redux/es/index.js"),mock_state=__webpack_require__("./test/data/mock-state.json"),store=__webpack_require__("./ui/store/store.ts"),react_router=__webpack_require__("./node_modules/react-router/esm/react-router.js"),transaction=__webpack_require__("./shared/constants/transaction.ts"),confirm_transaction_duck=__webpack_require__("./ui/ducks/confirm-transaction/confirm-transaction.duck.js"),send=__webpack_require__("./ui/ducks/send/index.js"),routes=__webpack_require__("./ui/helpers/constants/routes.ts"),redux=__webpack_require__("./node_modules/redux/es/redux.js"),dist=__webpack_require__("./node_modules/@metamask/transaction-controller/dist/index.js"),extension_dist=__webpack_require__("./node_modules/@metamask-institutional/extension/dist/index.js"),institution_background=__webpack_require__("./ui/store/institutional/institution-background.ts"),network=__webpack_require__("./shared/constants/network.ts"),actions=__webpack_require__("./ui/store/actions.ts"),send_utils=__webpack_require__("./ui/pages/send/send.utils.js"),util=__webpack_require__("./ui/helpers/utils/util.js"),selectors=__webpack_require__("./ui/selectors/index.js"),history_history=__webpack_require__("./ui/ducks/history/history.js"),metamask_metamask=__webpack_require__("./ui/ducks/metamask/metamask.js"),lib_util=__webpack_require__("./app/scripts/lib/util.ts"),transaction_utils=__webpack_require__("./shared/modules/transaction.utils.js"),hexstring_utils=__webpack_require__("./shared/modules/hexstring-utils.ts"),app=__webpack_require__("./ui/ducks/app/app.ts"),transactions_util=__webpack_require__("./ui/helpers/utils/transactions.util.js"),gas=__webpack_require__("./shared/constants/gas.ts"),selectors_selectors=__webpack_require__("./ui/selectors/selectors.js"),constants_app=__webpack_require__("./shared/constants/app.ts"),institutional_selectors=__webpack_require__("./ui/selectors/institutional/selectors.js"),institution_actions=__webpack_require__("./ui/store/institutional/institution-actions.ts"),token_util=__webpack_require__("./ui/helpers/utils/token-util.js"),transactions_controller_utils=__webpack_require__("./shared/lib/transactions-controller-utils.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),confirm_page_container=__webpack_require__("./ui/components/app/confirm-page-container/index.js"),error_keys=__webpack_require__("./ui/helpers/constants/error-keys.js"),user_preferenced_currency_display=__webpack_require__("./ui/components/app/user-preferenced-currency-display/index.js"),common=__webpack_require__("./ui/helpers/constants/common.ts"),text_field=__webpack_require__("./ui/components/ui/text-field/index.js"),simulation_error_message=__webpack_require__("./ui/components/ui/simulation-error-message/index.js"),metametrics=__webpack_require__("./shared/constants/metametrics.ts"),metrics=__webpack_require__("./ui/helpers/utils/metrics.js"),note_to_trader=__webpack_require__("./ui/components/institutional/note-to-trader/index.js"),transaction_modal=__webpack_require__("./ui/contexts/transaction-modal.js"),transaction_detail_component=__webpack_require__("./ui/components/app/transaction-detail/transaction-detail.component.js"),transaction_detail_item_component=__webpack_require__("./ui/components/app/transaction-detail-item/transaction-detail-item.component.js"),loading_heartbeat=__webpack_require__("./ui/components/ui/loading-heartbeat/index.js"),ledger_instruction_field=__webpack_require__("./ui/components/app/ledger-instruction-field/index.js"),send_constants=__webpack_require__("./ui/pages/send/send.constants.js"),conversion_utils=__webpack_require__("./shared/modules/conversion.utils.ts"),transaction_alerts=__webpack_require__("./ui/components/app/transaction-alerts/index.js"),confirm_hexdata=__webpack_require__("./ui/components/app/confirm-hexdata/index.js"),confirm_title=__webpack_require__("./ui/components/app/confirm-title/index.js"),confirm_subtitle=__webpack_require__("./ui/components/app/confirm-subtitle/index.js"),confirm_gas_display=__webpack_require__("./ui/components/app/confirm-gas-display/index.js");function updateTxData({txData,maxFeePerGas,customTokenAmount,dappProposedTokenAmount,currentTokenBalance,maxPriorityFeePerGas,baseFeePerGas,addToAddressBookIfNew,toAccounts,toAddress,name}){return txData.type===dist.TransactionType.simpleSend&&addToAddressBookIfNew(toAddress,toAccounts),baseFeePerGas&&(txData.estimatedBaseFee=baseFeePerGas),name&&(txData.contractMethodName=name),dappProposedTokenAmount&&(txData.dappProposedTokenAmount=dappProposedTokenAmount,txData.originalApprovalAmount=dappProposedTokenAmount),customTokenAmount?(txData.customTokenAmount=customTokenAmount,txData.finalApprovalAmount=customTokenAmount):void 0!==dappProposedTokenAmount&&(txData.finalApprovalAmount=dappProposedTokenAmount),currentTokenBalance&&(txData.currentTokenBalance=currentTokenBalance),maxFeePerGas&&(txData.txParams={...txData.txParams,maxFeePerGas}),maxPriorityFeePerGas&&(txData.txParams={...txData.txParams,maxPriorityFeePerGas}),txData}var keyring=__webpack_require__("./shared/constants/keyring.ts"),hardware=__webpack_require__("./ui/helpers/utils/hardware.js"),fee_details_component=__webpack_require__("./ui/components/app/fee-details-component/fee-details-component.js");function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class ConfirmTransactionBase extends react.Component{constructor(...args){super(...args),_defineProperty(this,"state",{submitting:!1,submitError:null,submitWarning:"",ethGasPriceWarning:"",editingGas:!1,userAcknowledgedGasMissing:!1,showWarningModal:!1,noteText:""}),_defineProperty(this,"_beforeUnloadForGasPolling",(()=>{this._isMounted=!1,this.state.pollingToken&&((0,actions.T_6)(this.state.pollingToken),(0,actions.hUm)(this.state.pollingToken))})),_defineProperty(this,"_removeBeforeUnload",(()=>{window.removeEventListener("beforeunload",this._beforeUnloadForGasPolling)})),_defineProperty(this,"supportsEIP1559",this.props.supportsEIP1559&&!(0,transactions_util.h0)(this.props.txData))}componentDidUpdate(prevProps){const{transactionStatus,showTransactionConfirmedModal,history,clearConfirmTransaction,nextNonce,customNonceValue,toAddress,tryReverseResolveAddress,isEthGasPrice,setDefaultHomeActiveTabName}=this.props,{customNonceValue:prevCustomNonceValue,nextNonce:prevNextNonce,toAddress:prevToAddress,transactionStatus:prevTxStatus,isEthGasPrice:prevIsEthGasPrice}=prevProps,statusUpdated=transactionStatus!==prevTxStatus,txDroppedOrConfirmed=transactionStatus===dist.TransactionStatus.dropped||transactionStatus===dist.TransactionStatus.confirmed;nextNonce===prevNextNonce&&customNonceValue===prevCustomNonceValue||(null!==nextNonce&&customNonceValue>nextNonce?this.setState({submitWarning:this.context.t("nextNonceWarning",[nextNonce])}):this.setState({submitWarning:""})),statusUpdated&&txDroppedOrConfirmed&&showTransactionConfirmedModal({onSubmit:()=>{clearConfirmTransaction(),setDefaultHomeActiveTabName("activity").then((()=>{history.push(routes.QO)}))}}),toAddress&&toAddress!==prevToAddress&&tryReverseResolveAddress(toAddress),isEthGasPrice!==prevIsEthGasPrice&&(isEthGasPrice?this.setState({ethGasPriceWarning:this.context.t(error_keys.Tb)}):this.setState({ethGasPriceWarning:""}))}getErrorKey(){const{balance,conversionRate,hexMaximumTransactionFee,txData:{txParams:{value:amount}={}}={},customGas,noGasPrice,gasFeeIsCustom}=this.props;return balance&&!(0,send_utils.UV)({amount,gasTotal:hexMaximumTransactionFee||"0x0",balance,conversionRate})?{valid:!1,errorKey:error_keys.Xr}:(0,conversion_utils.Z8)(customGas.gasLimit)<Number(send_constants.Ei)?{valid:!1,errorKey:error_keys.ln}:noGasPrice&&!gasFeeIsCustom?{valid:!1,errorKey:error_keys.Vk}:{valid:!0}}handleEditGas(){const{actionKey,txData:{origin},methodData={}}=this.props;this.context.trackEvent({category:metametrics.ci.Transactions,event:'User clicks "Edit" on gas',properties:{action:"Confirm Screen",legacy_event:!0,recipientKnown:null,functionType:actionKey||(0,metrics.ac)(methodData.name)||dist.TransactionType.contractInteraction,origin}}),this.setState({editingGas:!0})}handleCloseEditGas(){this.setState({editingGas:!1})}setUserAcknowledgedGasMissing(){this.setState({userAcknowledgedGasMissing:!0})}renderDetails(){var _this$props$txData2,_txData$txParams;const{primaryTotalTextOverride,secondaryTotalTextOverride,hexMaximumTransactionFee,hexMinimumTransactionFee,useNonceField,customNonceValue,updateCustomNonce,nextNonce,getNextNonce,txData,useNativeCurrencyAsPrimaryCurrency,primaryTotalTextOverrideMaxAmount,showLedgerSteps,nativeCurrency,isBuyableChain,useCurrencyRateCheck,tokenSymbol}=this.props,{t}=this.context,{userAcknowledgedGasMissing}=this.state,{valid}=this.getErrorKey(),isDisabled=()=>!userAcknowledgedGasMissing&&!valid,renderSimulationFailureWarning=Boolean(txData.simulationFails)&&!userAcknowledgedGasMissing,networkName=network.kW[txData.chainId],getTotalAmount=useMaxFee=>(0,conversion_utils.Mc)(txData.txParams.value,useMaxFee?hexMaximumTransactionFee:hexMinimumTransactionFee),renderTotalMaxAmount=useMaxFee=>void 0===primaryTotalTextOverrideMaxAmount&&void 0===secondaryTotalTextOverride?react.createElement(user_preferenced_currency_display.Z,{type:common._8,key:"total-max-amount",value:getTotalAmount(useMaxFee),hideLabel:!useNativeCurrencyAsPrimaryCurrency}):useNativeCurrencyAsPrimaryCurrency?primaryTotalTextOverrideMaxAmount:secondaryTotalTextOverride,nonceField=useNonceField?react.createElement("div",null,react.createElement("div",{className:"confirm-detail-row"},react.createElement("div",{className:"confirm-detail-row__label"},t("nonceFieldHeading")),react.createElement("div",{className:"custom-nonce-input"},react.createElement(text_field.Z,{type:"number",min:0,placeholder:"number"==typeof nextNonce?nextNonce.toString():null,onChange:({target:{value}})=>{!value.length||Number(value)<0?updateCustomNonce(""):updateCustomNonce(String(Math.floor(value))),getNextNonce()},fullWidth:!0,margin:"dense",value:customNonceValue||""})))):null;return react.createElement("div",{className:"confirm-page-container-content__details"},react.createElement(transaction_alerts.Z,{txData,setUserAcknowledgedGasMissing:()=>this.setUserAcknowledgedGasMissing(),userAcknowledgedGasMissing,nativeCurrency,networkName,type:txData.type,isBuyableChain,tokenSymbol}),react.createElement(transaction_detail_component.Z,{disableEditGasFeeButton:!0,disabled:isDisabled(),userAcknowledgedGasMissing,onEdit:renderSimulationFailureWarning?null:()=>this.handleEditGas(),rows:[renderSimulationFailureWarning&&(()=>react.createElement("div",{className:"confirm-page-container-content__error-container",key:"confirm-transaction-base_simulation-error-container"},react.createElement(simulation_error_message.Z,{userAcknowledgedGasMissing,setUserAcknowledgedGasMissing:()=>this.setUserAcknowledgedGasMissing()})))(),!renderSimulationFailureWarning&&react.createElement("div",{key:"confirm-transaction-base_confirm-gas-display"},react.createElement(confirm_gas_display.D,{userAcknowledgedGasMissing}),react.createElement(fee_details_component.Z,{useCurrencyRateCheck,txData}))]}),react.createElement(transaction_detail_component.Z,{disableEditGasFeeButton:!0,disabled:isDisabled(),userAcknowledgedGasMissing,rows:[react.createElement(transaction_detail_item_component.Z,{key:"confirm-transaction-base-total-item",detailTitle:t("total"),detailText:useCurrencyRateCheck&&(value=>{var _this$props$txData;return void 0===primaryTotalTextOverride&&void 0===secondaryTotalTextOverride||"0x0"===value?react.createElement("div",{className:"confirm-page-container-content__total-value"},react.createElement(loading_heartbeat.Z,{estimateUsed:null===(_this$props$txData=this.props.txData)||void 0===_this$props$txData?void 0:_this$props$txData.userFeeLevel}),react.createElement(user_preferenced_currency_display.Z,{type:common.Vb,key:"total-detail-text",value,hideLabel:Boolean(useNativeCurrencyAsPrimaryCurrency)})):useNativeCurrencyAsPrimaryCurrency?secondaryTotalTextOverride:primaryTotalTextOverride})(getTotalAmount()),detailTotal:renderTotalMaxAmount(!0),subTitle:t("transactionDetailGasTotalSubtitle"),subText:react.createElement("div",{className:"confirm-page-container-content__total-amount"},react.createElement(loading_heartbeat.Z,{estimateUsed:null===(_this$props$txData2=this.props.txData)||void 0===_this$props$txData2?void 0:_this$props$txData2.userFeeLevel}),react.createElement("strong",{key:"editGasSubTextAmountLabel"},t("editGasSubTextAmountLabel"))," ",renderTotalMaxAmount(!0))})]}),nonceField,showLedgerSteps?react.createElement(ledger_instruction_field.Z,{showDataInstruction:Boolean(null===(_txData$txParams=txData.txParams)||void 0===_txData$txParams?void 0:_txData$txParams.data)}):null)}renderDataHex(){const{txData,dataHexComponent}=this.props,{txParams:{data}}=txData;return data?react.createElement(confirm_hexdata.n,{txData,dataHexComponent}):null}handleEdit(){const{txData,tokenData,tokenProps,onEdit,actionKey,txData:{origin},methodData={}}=this.props;this.context.trackEvent({category:metametrics.ci.Transactions,event:"Edit Transaction",properties:{action:"Confirm Screen",legacy_event:!0,recipientKnown:null,functionType:actionKey||(0,metrics.ac)(methodData.name)||dist.TransactionType.contractInteraction,origin}}),onEdit({txData,tokenData,tokenProps})}handleCancelAll(){const{cancelAllTransactions,clearConfirmTransaction,history,mostRecentOverviewPage,showRejectTransactionsConfirmationModal,unapprovedTxCount}=this.props;showRejectTransactionsConfirmationModal({unapprovedTxCount,onSubmit:async()=>{this._removeBeforeUnload(),await cancelAllTransactions(),clearConfirmTransaction(),history.push(mostRecentOverviewPage)}})}async handleCancel(){const{txData,cancelTransaction,history,mostRecentOverviewPage,updateCustomNonce}=this.props;this._removeBeforeUnload(),updateCustomNonce(""),await cancelTransaction(txData),history.push(mostRecentOverviewPage)}handleSubmit(){const{submitting}=this.state;submitting||(this.props.isMainBetaFlask?this.handleMainSubmit():this.handleMMISubmit())}handleMainSubmit(){const{sendTransaction,txData,history,mostRecentOverviewPage,updateCustomNonce,methodData,maxFeePerGas,customTokenAmount,dappProposedTokenAmount,currentTokenBalance,maxPriorityFeePerGas,baseFeePerGas,addToAddressBookIfNew,toAccounts,toAddress,keyringForAccount}=this.props;let loadingIndicatorMessage;if((null==keyringForAccount?void 0:keyringForAccount.type)===keyring.ZO.snap)loadingIndicatorMessage=this.context.t("loadingScreenSnapMessage");else loadingIndicatorMessage=(0,hardware.o)(null==keyringForAccount?void 0:keyringForAccount.type)?this.context.t("loadingScreenHardwareWalletMessage"):null;updateTxData({txData,maxFeePerGas,customTokenAmount,dappProposedTokenAmount,currentTokenBalance,maxPriorityFeePerGas,baseFeePerGas,addToAddressBookIfNew,toAccounts,toAddress,name:methodData.name}),this.setState({submitting:!0,submitError:null},(()=>{this._removeBeforeUnload(),sendTransaction(txData,!1,loadingIndicatorMessage).then((()=>{this._isMounted&&this.setState({submitting:!1},(()=>{history.push(mostRecentOverviewPage),updateCustomNonce("")}))})).catch((error=>{this._isMounted&&(this.setState({submitting:!1,submitError:error.message}),updateCustomNonce(""))}))}))}async handleMMISubmit(){const{sendTransaction,updateTransaction,txData,history,mostRecentOverviewPage,updateCustomNonce,unapprovedTxCount,accountType,isNotification,setWaitForConfirmDeepLinkDialog,showTransactionsFailedModal,fromAddress,isNoteToTraderSupported,custodianPublishesTransaction,rpcUrl,methodData,maxFeePerGas,customTokenAmount,dappProposedTokenAmount,currentTokenBalance,maxPriorityFeePerGas,baseFeePerGas,addToAddressBookIfNew,toAccounts,toAddress,showCustodianDeepLink,clearConfirmTransaction}=this.props,{noteText}=this.state;"custody"===accountType&&(txData.custodyStatus="created",txData.metadata=txData.metadata||{},isNoteToTraderSupported&&(txData.metadata.note=noteText),txData.metadata.custodianPublishesTransaction=custodianPublishesTransaction,txData.metadata.rpcUrl=rpcUrl,await updateTransaction(txData)),updateTxData({txData,maxFeePerGas,customTokenAmount,dappProposedTokenAmount,currentTokenBalance,maxPriorityFeePerGas,baseFeePerGas,addToAddressBookIfNew,toAccounts,toAddress,name:methodData.name}),this.setState({submitting:!0,submitError:null},(()=>{this._removeBeforeUnload(),txData.custodyStatus&&setWaitForConfirmDeepLinkDialog(!0),sendTransaction(txData).then((()=>{if(txData.custodyStatus)showCustodianDeepLink({fromAddress,closeNotification:isNotification&&1===unapprovedTxCount,txId:txData.id,onDeepLinkFetched:()=>{this.context.trackEvent({category:"MMI",event:"Show deeplink for transaction"})},onDeepLinkShown:()=>{clearConfirmTransaction(),this._isMounted&&this.setState({submitting:!1},(()=>{history.push(mostRecentOverviewPage),updateCustomNonce("")}))}});else{if(!this._isMounted)return;this.setState({submitting:!1},(()=>{history.push(mostRecentOverviewPage),updateCustomNonce("")}))}})).catch((error=>{this._isMounted&&(showTransactionsFailedModal(error.message,isNotification),this.setState({submitting:!1,submitError:error.message}),setWaitForConfirmDeepLinkDialog(!0),updateCustomNonce(""))}))}))}handleSetApprovalForAll(){this.setState({showWarningModal:!0})}renderTitleComponent(){const{title,hexTransactionAmount,txData}=this.props;return react.createElement(confirm_title._,{title,hexTransactionAmount,txData})}renderSubtitleComponent(){const{assetStandard,subtitleComponent,hexTransactionAmount,txData}=this.props;return react.createElement(confirm_subtitle.H,{hexTransactionAmount,subtitleComponent,txData,assetStandard})}componentDidMount(){this._isMounted=!0;const{toAddress,txData:{origin}={},getNextNonce,tryReverseResolveAddress}=this.props,{trackEvent}=this.context;trackEvent({category:metametrics.ci.Transactions,event:"Confirm: Started",properties:{action:"Confirm Screen",legacy_event:!0,origin}}),getNextNonce(),toAddress&&tryReverseResolveAddress(toAddress),(0,actions.mhS)().then((pollingToken=>{this._isMounted?((0,actions.lTb)(pollingToken),this.setState({pollingToken})):((0,actions.T_6)(pollingToken),(0,actions.hUm)(this.state.pollingToken))})),window.addEventListener("beforeunload",this._beforeUnloadForGasPolling)}componentWillUnmount(){this._beforeUnloadForGasPolling(),this._removeBeforeUnload(),this.props.clearConfirmTransaction()}render(){const{t}=this.context,{fromName,fromAddress,toName,toAddress,toEns,toNickname,methodData,tokenAddress,contentComponent,onEdit,nonce,customNonceValue,unapprovedTxCount,type,hideSenderToRecipient,showAccountInHeader,txData,gasIsLoading,gasFeeIsCustom,nativeCurrency,hardwareWalletRequiresConnection,image,isApprovalOrRejection,assetStandard,displayAccountBalanceHeader,title,isNoteToTraderSupported}=this.props,{submitting,submitError,submitWarning,ethGasPriceWarning,editingGas,userAcknowledgedGasMissing,showWarningModal}=this.state,{name}=methodData,{valid,errorKey}=this.getErrorKey(),hasSimulationError=Boolean(txData.simulationFails),renderSimulationFailureWarning=hasSimulationError&&!userAcknowledgedGasMissing,isTokenApproval=txData.type===dist.TransactionType.tokenMethodSetApprovalForAll||txData.type===dist.TransactionType.tokenMethodApprove,isContractInteraction=txData.type===dist.TransactionType.contractInteraction,isContractInteractionFromDapp=(isTokenApproval||isContractInteraction)&&"metamask"!==txData.origin;let functionType;return isContractInteractionFromDapp&&(functionType=(0,metrics.ac)(name)),functionType||(functionType=type?(0,transactions_util.rm)(t,type,nativeCurrency):t("contractInteraction")),react.createElement(transaction_modal.rj,null,react.createElement(confirm_page_container.ZP,{fromName,fromAddress,showAccountInHeader,toName,toAddress,toEns,toNickname,showEdit:!isContractInteractionFromDapp&&Boolean(onEdit),action:functionType,image,title,titleComponent:this.renderTitleComponent(),subtitleComponent:this.renderSubtitleComponent(),detailsComponent:this.renderDetails(),dataHexComponent:this.renderDataHex(functionType),contentComponent,noteComponent:isNoteToTraderSupported&&react.createElement(note_to_trader.Z,{maxLength:"280",placeholder:t("notePlaceholder"),onChange:value=>this.setState({noteText:value}),noteText:this.state.noteText,labelText:t("transactionNote")}),nonce:customNonceValue||nonce,unapprovedTxCount,tokenAddress,errorMessage:submitError,errorKey,hasSimulationError,warning:submitWarning,disabled:renderSimulationFailureWarning||!valid||submitting||hardwareWalletRequiresConnection||gasIsLoading&&!gasFeeIsCustom,onEdit:()=>this.handleEdit(),onCancelAll:()=>this.handleCancelAll(),onCancel:()=>this.handleCancel(),onSubmit:()=>this.handleSubmit(),onSetApprovalForAll:()=>this.handleSetApprovalForAll(),showWarningModal,hideSenderToRecipient,origin:txData.origin,ethGasPriceWarning,editingGas,handleCloseEditGas:()=>this.handleCloseEditGas(),currentTransaction:txData,supportsEIP1559:this.supportsEIP1559,nativeCurrency,isApprovalOrRejection,assetStandard,txData,displayAccountBalanceHeader}))}}_defineProperty(ConfirmTransactionBase,"contextTypes",{t:prop_types_default().func,trackEvent:prop_types_default().func}),_defineProperty(ConfirmTransactionBase,"propTypes",{history:prop_types_default().object,balance:prop_types_default().string,cancelTransaction:prop_types_default().func,cancelAllTransactions:prop_types_default().func,clearConfirmTransaction:prop_types_default().func,conversionRate:prop_types_default().number,fromAddress:prop_types_default().string,fromName:prop_types_default().string,hexTransactionAmount:prop_types_default().string,hexMaximumTransactionFee:prop_types_default().string,hexMinimumTransactionFee:prop_types_default().string,methodData:prop_types_default().object,nonce:prop_types_default().string,useNonceField:prop_types_default().bool,customNonceValue:prop_types_default().string,updateCustomNonce:prop_types_default().func,sendTransaction:prop_types_default().func,showTransactionConfirmedModal:prop_types_default().func,showRejectTransactionsConfirmationModal:prop_types_default().func,toAccounts:prop_types_default().array,toAddress:prop_types_default().string,tokenData:prop_types_default().object,tokenProps:prop_types_default().object,toName:prop_types_default().string,toEns:prop_types_default().string,toNickname:prop_types_default().string,transactionStatus:prop_types_default().string,txData:prop_types_default().object,unapprovedTxCount:prop_types_default().number,customGas:prop_types_default().object,addToAddressBookIfNew:prop_types_default().func,keyringForAccount:prop_types_default().object,actionKey:prop_types_default().string,contentComponent:prop_types_default().node,dataHexComponent:prop_types_default().node,tokenAddress:prop_types_default().string,customTokenAmount:prop_types_default().string,dappProposedTokenAmount:prop_types_default().string,currentTokenBalance:prop_types_default().string,onEdit:prop_types_default().func,subtitleComponent:prop_types_default().node,title:prop_types_default().string,image:prop_types_default().string,type:prop_types_default().string,getNextNonce:prop_types_default().func,nextNonce:prop_types_default().number,tryReverseResolveAddress:prop_types_default().func.isRequired,hideSenderToRecipient:prop_types_default().bool,showAccountInHeader:prop_types_default().bool,mostRecentOverviewPage:prop_types_default().string.isRequired,isEthGasPrice:prop_types_default().bool,noGasPrice:prop_types_default().bool,setDefaultHomeActiveTabName:prop_types_default().func,primaryTotalTextOverride:prop_types_default().string,secondaryTotalTextOverride:prop_types_default().string,gasIsLoading:prop_types_default().bool,primaryTotalTextOverrideMaxAmount:prop_types_default().string,useNativeCurrencyAsPrimaryCurrency:prop_types_default().bool,maxFeePerGas:prop_types_default().string,maxPriorityFeePerGas:prop_types_default().string,baseFeePerGas:prop_types_default().string,gasFeeIsCustom:prop_types_default().bool,showLedgerSteps:prop_types_default().bool.isRequired,nativeCurrency:prop_types_default().string,supportsEIP1559:prop_types_default().bool,hardwareWalletRequiresConnection:prop_types_default().bool,isBuyableChain:prop_types_default().bool,isApprovalOrRejection:prop_types_default().bool,assetStandard:prop_types_default().string,useCurrencyRateCheck:prop_types_default().bool,isNotification:prop_types_default().bool,accountType:prop_types_default().string,setWaitForConfirmDeepLinkDialog:prop_types_default().func,showTransactionsFailedModal:prop_types_default().func,showCustodianDeepLink:prop_types_default().func,isNoteToTraderSupported:prop_types_default().bool,custodianPublishesTransaction:prop_types_default().bool,rpcUrl:prop_types_default().string,isMainBetaFlask:prop_types_default().bool,displayAccountBalanceHeader:prop_types_default().bool,tokenSymbol:prop_types_default().string,updateTransaction:prop_types_default().func}),ConfirmTransactionBase.__docgenInfo={description:"",methods:[{name:"getErrorKey",docblock:null,modifiers:[],params:[],returns:null},{name:"handleEditGas",docblock:null,modifiers:[],params:[],returns:null},{name:"handleCloseEditGas",docblock:null,modifiers:[],params:[],returns:null},{name:"setUserAcknowledgedGasMissing",docblock:null,modifiers:[],params:[],returns:null},{name:"renderDetails",docblock:null,modifiers:[],params:[],returns:null},{name:"renderDataHex",docblock:null,modifiers:[],params:[],returns:null},{name:"handleEdit",docblock:null,modifiers:[],params:[],returns:null},{name:"handleCancelAll",docblock:null,modifiers:[],params:[],returns:null},{name:"handleCancel",docblock:null,modifiers:["async"],params:[],returns:null},{name:"handleSubmit",docblock:null,modifiers:[],params:[],returns:null},{name:"handleMainSubmit",docblock:null,modifiers:[],params:[],returns:null},{name:"handleMMISubmit",docblock:null,modifiers:["async"],params:[],returns:null},{name:"handleSetApprovalForAll",docblock:null,modifiers:[],params:[],returns:null},{name:"renderTitleComponent",docblock:null,modifiers:[],params:[],returns:null},{name:"renderSubtitleComponent",docblock:null,modifiers:[],params:[],returns:null},{name:"_beforeUnloadForGasPolling",docblock:null,modifiers:[],params:[],returns:null},{name:"_removeBeforeUnload",docblock:null,modifiers:[],params:[],returns:null}],displayName:"ConfirmTransactionBase",props:{history:{description:"",type:{name:"object"},required:!1},balance:{description:"",type:{name:"string"},required:!1},cancelTransaction:{description:"",type:{name:"func"},required:!1},cancelAllTransactions:{description:"",type:{name:"func"},required:!1},clearConfirmTransaction:{description:"",type:{name:"func"},required:!1},conversionRate:{description:"",type:{name:"number"},required:!1},fromAddress:{description:"",type:{name:"string"},required:!1},fromName:{description:"",type:{name:"string"},required:!1},hexTransactionAmount:{description:"",type:{name:"string"},required:!1},hexMaximumTransactionFee:{description:"",type:{name:"string"},required:!1},hexMinimumTransactionFee:{description:"",type:{name:"string"},required:!1},methodData:{description:"",type:{name:"object"},required:!1},nonce:{description:"",type:{name:"string"},required:!1},useNonceField:{description:"",type:{name:"bool"},required:!1},customNonceValue:{description:"",type:{name:"string"},required:!1},updateCustomNonce:{description:"",type:{name:"func"},required:!1},sendTransaction:{description:"",type:{name:"func"},required:!1},showTransactionConfirmedModal:{description:"",type:{name:"func"},required:!1},showRejectTransactionsConfirmationModal:{description:"",type:{name:"func"},required:!1},toAccounts:{description:"",type:{name:"array"},required:!1},toAddress:{description:"",type:{name:"string"},required:!1},tokenData:{description:"",type:{name:"object"},required:!1},tokenProps:{description:"",type:{name:"object"},required:!1},toName:{description:"",type:{name:"string"},required:!1},toEns:{description:"",type:{name:"string"},required:!1},toNickname:{description:"",type:{name:"string"},required:!1},transactionStatus:{description:"",type:{name:"string"},required:!1},txData:{description:"",type:{name:"object"},required:!1},unapprovedTxCount:{description:"",type:{name:"number"},required:!1},customGas:{description:"",type:{name:"object"},required:!1},addToAddressBookIfNew:{description:"",type:{name:"func"},required:!1},keyringForAccount:{description:"",type:{name:"object"},required:!1},actionKey:{description:"",type:{name:"string"},required:!1},contentComponent:{description:"",type:{name:"node"},required:!1},dataHexComponent:{description:"",type:{name:"node"},required:!1},tokenAddress:{description:"",type:{name:"string"},required:!1},customTokenAmount:{description:"",type:{name:"string"},required:!1},dappProposedTokenAmount:{description:"",type:{name:"string"},required:!1},currentTokenBalance:{description:"",type:{name:"string"},required:!1},onEdit:{description:"",type:{name:"func"},required:!1},subtitleComponent:{description:"",type:{name:"node"},required:!1},title:{description:"",type:{name:"string"},required:!1},image:{description:"",type:{name:"string"},required:!1},type:{description:"",type:{name:"string"},required:!1},getNextNonce:{description:"",type:{name:"func"},required:!1},nextNonce:{description:"",type:{name:"number"},required:!1},tryReverseResolveAddress:{description:"",type:{name:"func"},required:!0},hideSenderToRecipient:{description:"",type:{name:"bool"},required:!1},showAccountInHeader:{description:"",type:{name:"bool"},required:!1},mostRecentOverviewPage:{description:"",type:{name:"string"},required:!0},isEthGasPrice:{description:"",type:{name:"bool"},required:!1},noGasPrice:{description:"",type:{name:"bool"},required:!1},setDefaultHomeActiveTabName:{description:"",type:{name:"func"},required:!1},primaryTotalTextOverride:{description:"",type:{name:"string"},required:!1},secondaryTotalTextOverride:{description:"",type:{name:"string"},required:!1},gasIsLoading:{description:"",type:{name:"bool"},required:!1},primaryTotalTextOverrideMaxAmount:{description:"",type:{name:"string"},required:!1},useNativeCurrencyAsPrimaryCurrency:{description:"",type:{name:"bool"},required:!1},maxFeePerGas:{description:"",type:{name:"string"},required:!1},maxPriorityFeePerGas:{description:"",type:{name:"string"},required:!1},baseFeePerGas:{description:"",type:{name:"string"},required:!1},gasFeeIsCustom:{description:"",type:{name:"bool"},required:!1},showLedgerSteps:{description:"",type:{name:"bool"},required:!0},nativeCurrency:{description:"",type:{name:"string"},required:!1},supportsEIP1559:{description:"",type:{name:"bool"},required:!1},hardwareWalletRequiresConnection:{description:"",type:{name:"bool"},required:!1},isBuyableChain:{description:"",type:{name:"bool"},required:!1},isApprovalOrRejection:{description:"",type:{name:"bool"},required:!1},assetStandard:{description:"",type:{name:"string"},required:!1},useCurrencyRateCheck:{description:"",type:{name:"bool"},required:!1},isNotification:{description:"",type:{name:"bool"},required:!1},accountType:{description:"",type:{name:"string"},required:!1},setWaitForConfirmDeepLinkDialog:{description:"",type:{name:"func"},required:!1},showTransactionsFailedModal:{description:"",type:{name:"func"},required:!1},showCustodianDeepLink:{description:"",type:{name:"func"},required:!1},isNoteToTraderSupported:{description:"",type:{name:"bool"},required:!1},custodianPublishesTransaction:{description:"",type:{name:"bool"},required:!1},rpcUrl:{description:"",type:{name:"string"},required:!1},isMainBetaFlask:{description:"",type:{name:"bool"},required:!1},displayAccountBalanceHeader:{description:"",type:{name:"bool"},required:!1},tokenSymbol:{description:"",type:{name:"string"},required:!1},updateTransaction:{description:"",type:{name:"func"},required:!1}},context:{t:{type:{name:"func"},required:!1},trackEvent:{type:{name:"func"},required:!1}}};let customNonceValue="";const confirm_transaction_base_container=(0,redux.compose)(react_router.EN,(0,es.$j)(((state,ownProps)=>{var _identities$toAddress,_tokenList$toAddress$;const{toAddress:propsToAddress,customTxParamsData,match:{params={}}}=ownProps,{id:paramsTransactionId}=params,isMainnet=(0,selectors.b8h)(state),isNotification=(0,lib_util.kD)()===constants_app.vH,isGasEstimatesLoading=(0,metamask_metamask.rc)(state),gasLoadingAnimationIsShowing=(0,app.Jl)(state),isBuyableChain=(0,selectors.R9W)(state),{confirmTransaction,metamask}=state,conversionRate=(0,metamask_metamask.PC)(state),{identities,addressBook,nextNonce}=metamask,unapprovedTxs=(0,selectors.fvg)(state),{chainId}=(0,metamask_metamask.Vu)(state),{tokenData,txData,tokenProps,nonce}=confirmTransaction,{txParams={},id:transactionId,type}=txData,txId=transactionId||paramsTransactionId,transaction=(0,selectors.K8C)(state,txId),{from:fromAddress,to:txParamsToAddress,gasPrice,gas:gasLimit,value:amount,data}=transaction&&transaction.txParams||txParams,accounts=(0,selectors.Dh7)(state),transactionData=(0,transaction_utils.I1)(data),tokenToAddress=(0,token_util.Qn)(transactionData),{balance}=accounts[fromAddress],{name:fromName}=identities[fromAddress],keyring=(0,metamask_metamask.jf)(state,fromAddress),toAddress=type===dist.TransactionType.simpleSend||!(0,hexstring_utils.H1)(amount)?txParamsToAddress:propsToAddress||tokenToAddress||txParamsToAddress,toAccounts=(0,metamask_metamask.zZ)(state),tokenList=(0,selectors.HJ)(state),toName=(null===(_identities$toAddress=identities[toAddress])||void 0===_identities$toAddress?void 0:_identities$toAddress.name)||(null===(_tokenList$toAddress$=tokenList[null==toAddress?void 0:toAddress.toLowerCase()])||void 0===_tokenList$toAddress$?void 0:_tokenList$toAddress$.name)||(0,util.$Q)((0,hexstring_utils.QG)(toAddress)),checksummedAddress=(0,hexstring_utils.QG)(toAddress),addressBookObject=addressBook&&addressBook[chainId]&&addressBook[chainId][checksummedAddress],toEns=(0,selectors.HZz)(state,checksummedAddress),toNickname=addressBookObject?addressBookObject.name:"",transactionStatus=transaction?transaction.status:"",supportsEIP1559=(0,selectors.mVn)(state)&&!(0,transactions_util.h0)(txParams),{hexTransactionAmount,hexMaximumTransactionFee,hexMinimumTransactionFee,gasEstimationObject}=(0,selectors.nfL)(state,transaction),currentNetworkUnapprovedTxs=Object.keys(unapprovedTxs).filter((key=>unapprovedTxs[key].chainId===chainId)).reduce(((acc,key)=>({...acc,[key]:unapprovedTxs[key]})),{}),unapprovedTxCount=(0,util.gs)(currentNetworkUnapprovedTxs).length,insufficientBalance=!(0,send_utils.UV)({amount,gasTotal:(0,transactions_controller_utils.hJ)(gasLimit,gasPrice),balance,conversionRate}),methodData=(0,selectors.LO0)(state,data)||{},fullTxData=(0,selectors.hOj)(state,txId,dist.TransactionStatus.unapproved,customTxParamsData);customNonceValue=(0,selectors.Dp_)(state);const isEthGasPrice=(0,selectors.OIh)(state),noGasPrice=!supportsEIP1559&&(0,selectors.zA3)(state),{useNativeCurrencyAsPrimaryCurrency}=(0,selectors.Izy)(state),gasFeeIsCustom=fullTxData.userFeeLevel===gas.d_||(0,transaction_utils.EN)(fullTxData),fromAddressIsLedger=(0,metamask_metamask.Dc)(state,fromAddress),nativeCurrency=(0,metamask_metamask.JK)(state),accountType=(0,selectors_selectors.lxc)(state,fromAddress),fromChecksumHexAddress=(0,hexstring_utils.QG)(fromAddress),isNoteToTraderSupported=(0,institutional_selectors.GZ)(state,fromChecksumHexAddress),custodianPublishesTransaction=(0,institutional_selectors.HL)(state,fromChecksumHexAddress),builtinRpcUrl=network.By[chainId],{rpcUrl:customRpcUrl}=(0,metamask_metamask.Vu)(state),rpcUrl=customRpcUrl||builtinRpcUrl,hardwareWalletRequiresConnection=(0,selectors.DnU)(state,fromAddress),isMultiLayerFeeNetwork=(0,selectors.SEh)(state);return{balance,fromAddress,fromName,toAccounts,toAddress,toEns,toName,toNickname,hexTransactionAmount,hexMaximumTransactionFee,hexMinimumTransactionFee,txData:fullTxData,tokenData,methodData,tokenProps,conversionRate,transactionStatus,nonce,unapprovedTxs,unapprovedTxCount,customGas:{gasLimit,gasPrice},advancedInlineGasShown:(0,selectors.uRW)(state),useNonceField:(0,selectors.Uwe)(state),customNonceValue,insufficientBalance,hideFiatConversion:!(0,selectors.i8I)(state),type,nextNonce,mostRecentOverviewPage:(0,history_history.H7)(state),isMainnet,isEthGasPrice,noGasPrice,supportsEIP1559,gasIsLoading:isGasEstimatesLoading||gasLoadingAnimationIsShowing,useNativeCurrencyAsPrimaryCurrency,maxFeePerGas:gasEstimationObject.maxFeePerGas,maxPriorityFeePerGas:gasEstimationObject.maxPriorityFeePerGas,baseFeePerGas:gasEstimationObject.baseFeePerGas,gasFeeIsCustom,showLedgerSteps:fromAddressIsLedger,nativeCurrency,hardwareWalletRequiresConnection,isMultiLayerFeeNetwork,chainId,isBuyableChain,useCurrencyRateCheck:(0,selectors.nsI)(state),keyringForAccount:keyring,accountType,isNoteToTraderSupported,isNotification,custodianPublishesTransaction,rpcUrl}}),(dispatch=>{const mmiActions=(0,institution_background.I6)();return{tryReverseResolveAddress:address=>dispatch((0,actions.DNX)(address)),updateCustomNonce:value=>{customNonceValue=value,dispatch((0,actions.spc)(value))},clearConfirmTransaction:()=>dispatch((0,confirm_transaction_duck.vi)()),showTransactionConfirmedModal:({onSubmit})=>dispatch((0,actions.K4b)({name:"TRANSACTION_CONFIRMED",onSubmit})),showRejectTransactionsConfirmationModal:({onSubmit,unapprovedTxCount})=>dispatch((0,actions.K4b)({name:"REJECT_TRANSACTIONS",onSubmit,unapprovedTxCount})),cancelTransaction:({id})=>dispatch((0,actions.cKU)({id})),cancelAllTransactions:txList=>dispatch((0,actions.irt)(txList)),sendTransaction:(txData,dontShowLoadingIndicator,loadingIndicatorMessage)=>dispatch((0,actions.GGx)((txData=>customNonceValue?{...txData,customNonceValue}:txData)(txData),dontShowLoadingIndicator,loadingIndicatorMessage)),updateTransaction:txMeta=>{dispatch((0,actions.Ld3)(txMeta,!0))},getNextNonce:()=>dispatch((0,actions.l1k)()),setDefaultHomeActiveTabName:tabName=>dispatch((0,actions.txm)(tabName)),updateTransactionGasFees:gasFees=>{dispatch((0,metamask_metamask.Nt)({...gasFees,expectHexWei:!0}))},addToAddressBookIfNew:(newAddress,toAccounts,nickname="")=>{const hexPrefixedAddress=(0,lib_util.L_)(newAddress);(function addressIsNew(toAccounts,newAddress){const newAddressNormalized=newAddress.toLowerCase();return!toAccounts.some((({address})=>address.toLowerCase()===newAddressNormalized))})(toAccounts,hexPrefixedAddress)&&dispatch((0,actions.Wbu)(hexPrefixedAddress,nickname))},getCustodianConfirmDeepLink:id=>dispatch(mmiActions.getCustodianConfirmDeepLink(id)),showTransactionsFailedModal:(errorMessage,closeNotification)=>dispatch((0,actions.K4b)({name:"TRANSACTION_FAILED",errorMessage,closeNotification})),showCustodianDeepLink:({txId,fromAddress,closeNotification,onDeepLinkFetched,onDeepLinkShown})=>(0,extension_dist.kC)({dispatch,mmiActions,txId,fromAddress,closeNotification,onDeepLinkFetched,onDeepLinkShown,showCustodyConfirmLink:institution_actions.TV}),setWaitForConfirmDeepLinkDialog:wait=>dispatch(mmiActions.setWaitForConfirmDeepLinkDialog(wait))}}),((stateProps,dispatchProps,ownProps)=>{const{txData,unapprovedTxs}=stateProps,{cancelAllTransactions:dispatchCancelAllTransactions,updateTransactionGasFees:dispatchUpdateTransactionGasFees,...otherDispatchProps}=dispatchProps;let isMainBetaFlask=ownProps.isMainBetaFlask||!1;return void 0===ownProps.isMainBetaFlask&&(isMainBetaFlask=!0),{...stateProps,...otherDispatchProps,...ownProps,cancelAllTransactions:()=>dispatchCancelAllTransactions((0,util.gs)(unapprovedTxs)),updateGasAndCalculate:({gasLimit,gasPrice})=>{dispatchUpdateTransactionGasFees({gasLimit,gasPrice,transaction:txData})},isMainBetaFlask}})))(ConfirmTransactionBase),ConfirmSendEther=()=>{const dispatch=(0,es.I0)(),history=(0,react_router.k6)(),handleEdit=({txData})=>{(async txData=>{const{id}=txData;await dispatch((0,send.tQ)(transaction.h3.native,id.toString())),dispatch((0,confirm_transaction_duck.vi)())})(txData).then((()=>{history.push(routes.Xy)}))};return react.createElement(confirm_transaction_base_container,{actionKey:"confirm",onEdit:confirmTransactionData=>handleEdit(confirmTransactionData)})};ConfirmSendEther.__docgenInfo={description:"",methods:[],displayName:"ConfirmSendEther"};const confirm_send_ether=ConfirmSendEther;var _DefaultStory$paramet,_DefaultStory$paramet2;const sendEther={id:9597986287241458,time:1681203297082,status:"unapproved",originalGasEstimate:"0x5208",userEditedGasLimit:!1,chainId:"0x5",loadingDefaults:!1,dappSuggestedGasFees:{maxPriorityFeePerGas:"0x3b9aca00",maxFeePerGas:"0x2540be400"},sendFlowHistory:[],txParams:{from:"0x0dcd5d886577d5081b0c52e242ef29e70be3e7bc",to:"0x0c54fccd2e384b4bb6f2e405bf5cbc15a017aafb",value:"0x0",gas:"0x5208",maxFeePerGas:"0x2540be400",maxPriorityFeePerGas:"0x3b9aca00"},origin:"https://metamask.github.io",actionId:1830698773,type:"simpleSend",securityProviderResponse:null,userFeeLevel:"dappSuggested",defaultGasEstimates:{estimateType:"dappSuggested",gas:"0x5208",maxFeePerGas:"0x2540be400",maxPriorityFeePerGas:"0x3b9aca00"}};mock_state.metamask.transactions.push(sendEther),mock_state.confirmTransaction={txData:sendEther};const confirm_send_ether_stories_store=(0,store.Z)(mock_state),confirm_send_ether_stories={title:"Pages/ConfirmSendEther",decorators:[story=>react.createElement(es.zt,{store:confirm_send_ether_stories_store},story())]},DefaultStory=()=>react.createElement(confirm_send_ether,null);DefaultStory.storyName="Default",DefaultStory.parameters={...DefaultStory.parameters,docs:{...null===(_DefaultStory$paramet=DefaultStory.parameters)||void 0===_DefaultStory$paramet?void 0:_DefaultStory$paramet.docs,source:{originalSource:"() => {\n  return <ConfirmSendEther />;\n}",...null===(_DefaultStory$paramet2=DefaultStory.parameters)||void 0===_DefaultStory$paramet2||null===(_DefaultStory$paramet2=_DefaultStory$paramet2.docs)||void 0===_DefaultStory$paramet2?void 0:_DefaultStory$paramet2.source}}};const __namedExportsOrder=["DefaultStory"];DefaultStory.__docgenInfo={description:"",methods:[],displayName:"DefaultStory"}},"./shared/modules/security-provider.utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>isSuspiciousResponse});var _constants_security_provider__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./shared/constants/security-provider.ts");function isSuspiciousResponse(securityProviderResponse){if(!securityProviderResponse)return!1;const isFlagged=void 0!==securityProviderResponse.flagAsDangerous&&securityProviderResponse.flagAsDangerous!==_constants_security_provider__WEBPACK_IMPORTED_MODULE_0__.C_.NOT_MALICIOUS,isNotVerified=0===Object.keys(securityProviderResponse).length;return isFlagged||isNotVerified}},"./ui/components/app/confirm-gas-display/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{D:()=>_confirm_gas_display__WEBPACK_IMPORTED_MODULE_0__.Z});var _confirm_gas_display__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./ui/components/app/confirm-gas-display/confirm-gas-display.js")},"./ui/components/app/confirm-hexdata/confirm-hexdata.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>confirm_hexdata});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-redux/es/index.js"),dist_browser=__webpack_require__("./node_modules/ethereumjs-util/dist.browser/index.js"),Buffer=__webpack_require__("./node_modules/buffer/index.js").Buffer;var selectors=__webpack_require__("./ui/selectors/index.js"),useI18nContext=__webpack_require__("./ui/hooks/useI18nContext.js"),dist=__webpack_require__("./node_modules/@metamask/transaction-controller/dist/index.js"),app=__webpack_require__("./shared/constants/app.ts"),metamask=__webpack_require__("./ui/ducks/metamask/metamask.js"),transactions_util=__webpack_require__("./ui/helpers/utils/transactions.util.js"),metrics=__webpack_require__("./ui/helpers/utils/metrics.js");var design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),box=__webpack_require__("./ui/components/ui/box/index.js"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),tooltip=__webpack_require__("./ui/components/ui/tooltip/tooltip.js"),i18n=__webpack_require__("./ui/contexts/i18n.js"),useCopyToClipboard=__webpack_require__("./ui/hooks/useCopyToClipboard.js");const CopyRawData=({data})=>{const t=(0,react.useContext)(i18n.OO),[copied,handleCopy]=(0,useCopyToClipboard.m)();return react.createElement("div",{className:"copy-raw-data"},react.createElement(tooltip.Z,{position:"right",title:copied?t("copiedExclamation"):""},react.createElement("button",{onClick:()=>{handleCopy(data)},className:"copy-raw-data__button"},react.createElement("div",{className:"copy-raw-data__icon"},react.createElement(component_library.JO,{name:copied?component_library.uH.CopySuccess:component_library.uH.Copy,color:design_system.EY.iconDefault})),react.createElement("div",{className:"copy-raw-data__label"},t("copyRawTransactionData")))))};CopyRawData.propTypes={data:prop_types_default().string.isRequired},CopyRawData.__docgenInfo={description:"",methods:[],displayName:"CopyRawData",props:{data:{description:"",type:{name:"string"},required:!0}}};const copy_raw_data_component=CopyRawData,ConfirmHexData=({txData,dataHexComponent})=>{const t=(0,useI18nContext.C)(),{txParams={}}=txData,methodData=(0,es.v9)((state=>(0,selectors.LO0)(state,txParams.data)||{})),{functionType}=((txData={})=>{const t=(0,useI18nContext.C)(),nativeCurrency=(0,es.v9)(metamask.JK),{txParams}=txData,methodData=(0,es.v9)((state=>(0,selectors.LO0)(state,null==txParams?void 0:txParams.data)||{}));if(!txParams)return{};const isTokenApproval=txData.type===dist.TransactionType.tokenMethodSetApprovalForAll||txData.type===dist.TransactionType.tokenMethodApprove,isContractInteraction=txData.type===dist.TransactionType.contractInteraction;let functionType=(isTokenApproval||isContractInteraction)&&txData.origin!==app.jr?(0,metrics.ac)(null==methodData?void 0:methodData.name):void 0;return functionType||(functionType=txData.type?(0,transactions_util.rm)(t,txData.type,nativeCurrency):t("contractInteraction")),{functionType}})(txData);if(dataHexComponent)return dataHexComponent;if(!txParams.data||!txParams.to)return null;const{params}=methodData,functionParams=null!=params&&params.length?`(${params.map((({type})=>type)).join(", ")})`:"";return react.createElement(box.ZP,{padding:4},react.createElement(box.ZP,{paddingBottom:3,paddingTop:2},react.createElement(component_library.xv,{as:"span",textTransform:design_system._5.Uppercase,variant:design_system.rK.bodySm},`${t("functionType")}:`),react.createElement(component_library.xv,{as:"span",color:design_system.Il.textDefault,paddingLeft:1,textTransform:design_system._5.Capitalize,variant:design_system.rK.bodySmBold},`${functionType} ${functionParams}`)),params&&react.createElement(box.ZP,{backgroundColor:design_system.Il.backgroundAlternative,padding:4},react.createElement(component_library.xv,{as:"h3",paddingBottom:3,paddingTop:2,textTransform:design_system._5.Uppercase,variant:design_system.rK.bodySm},`${t("parameters")}:`),react.createElement(component_library.xv,{overflowWrap:design_system.mn.BreakWord,variant:design_system.rK.bodySm},react.createElement("pre",null,JSON.stringify(params,null,2)))),react.createElement(component_library.xv,{as:"h3",paddingBottom:3,paddingTop:2,textTransform:design_system._5.Uppercase,variant:design_system.rK.bodySm},`${t("hexData")}: ${function toBuffer(input){return"string"==typeof input&&!1===(0,dist_browser.isHexString)(input)?Buffer.from(input):(0,dist_browser.toBuffer)(input)}(null==txParams?void 0:txParams.data).length} bytes`),react.createElement(component_library.xv,{backgroundColor:design_system.Il.backgroundAlternative,overflowWrap:design_system.mn.BreakWord,padding:4,variant:design_system.rK.bodySm},null==txParams?void 0:txParams.data),react.createElement(copy_raw_data_component,{data:null==txParams?void 0:txParams.data}))};ConfirmHexData.propTypes={txData:prop_types_default().object,dataHexComponent:prop_types_default().element},ConfirmHexData.__docgenInfo={description:"",methods:[],displayName:"ConfirmHexData",props:{txData:{description:"",type:{name:"object"},required:!1},dataHexComponent:{description:"",type:{name:"element"},required:!1}}};const confirm_hexdata=ConfirmHexData},"./ui/components/app/confirm-hexdata/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>_confirm_hexdata__WEBPACK_IMPORTED_MODULE_0__.Z});var _confirm_hexdata__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./ui/components/app/confirm-hexdata/confirm-hexdata.js")},"./ui/components/app/confirm-subtitle/confirm-subtitle.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>confirm_subtitle});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-redux/es/index.js"),common=__webpack_require__("./ui/helpers/constants/common.ts"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),transactions_util=__webpack_require__("./ui/helpers/utils/transactions.util.js"),selectors=__webpack_require__("./ui/selectors/index.js"),metamask=__webpack_require__("./ui/ducks/metamask/metamask.js"),string_utils=__webpack_require__("./shared/modules/string-utils.ts");var component_library=__webpack_require__("./ui/components/component-library/index.ts"),user_preferenced_currency_display=__webpack_require__("./ui/components/app/user-preferenced-currency-display/index.js");const ConfirmSubTitle=({txData,hexTransactionAmount,subtitleComponent,assetStandard})=>{const shouldShowFiat=(0,es.v9)(selectors.i8I),{isNftTransfer}=((txData={})=>{var _allNftContracts$sele;const{allNftContracts,selectedAddress}=(0,es.v9)((state=>state.metamask)),{chainId}=(0,es.v9)(metamask.Vu);return{isNftTransfer:Boolean(null==allNftContracts||null===(_allNftContracts$sele=allNftContracts[selectedAddress])||void 0===_allNftContracts$sele||null===(_allNftContracts$sele=_allNftContracts$sele[chainId])||void 0===_allNftContracts$sele?void 0:_allNftContracts$sele.find((contract=>(0,string_utils.J)(contract.address,txData.txParams.to))))}})(txData);return shouldShowFiat||isNftTransfer||(0,transactions_util.Tp)(assetStandard)?subtitleComponent||react.createElement(component_library.xv,{as:"h5",ellipsis:!0,variant:design_system.rK.bodyMd,color:design_system.Il.textAlternative},react.createElement(user_preferenced_currency_display.Z,{value:hexTransactionAmount,type:common.Vb,showEthLogo:!0,hideLabel:!0})):null};ConfirmSubTitle.propTypes={assetStandard:prop_types_default().string,hexTransactionAmount:prop_types_default().string,subtitleComponent:prop_types_default().element,txData:prop_types_default().object.isRequired},ConfirmSubTitle.__docgenInfo={description:"",methods:[],displayName:"ConfirmSubTitle",props:{assetStandard:{description:"",type:{name:"string"},required:!1},hexTransactionAmount:{description:"",type:{name:"string"},required:!1},subtitleComponent:{description:"",type:{name:"element"},required:!1},txData:{description:"",type:{name:"object"},required:!0}}};const confirm_subtitle=ConfirmSubTitle},"./ui/components/app/confirm-subtitle/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>_confirm_subtitle__WEBPACK_IMPORTED_MODULE_0__.Z});var _confirm_subtitle__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./ui/components/app/confirm-subtitle/confirm-subtitle.js")},"./ui/components/app/confirm-title/confirm-title.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_6___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_6__),_metamask_transaction_controller__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@metamask/transaction-controller/dist/index.js"),_helpers_constants_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./ui/helpers/constants/common.ts"),_component_library__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./ui/components/component-library/index.ts"),_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./ui/helpers/constants/design-system.ts"),_user_preferenced_currency_display__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./ui/components/app/user-preferenced-currency-display/index.js");const ConfirmTitle=({title,hexTransactionAmount,txData})=>{var _txData$txParams;const isContractInteraction=txData.type===_metamask_transaction_controller__WEBPACK_IMPORTED_MODULE_1__.TransactionType.contractInteraction;return(isContractInteraction||txData.type===_metamask_transaction_controller__WEBPACK_IMPORTED_MODULE_1__.TransactionType.deployContract)&&"0x0"===(null===(_txData$txParams=txData.txParams)||void 0===_txData$txParams?void 0:_txData$txParams.value)?null:title?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xv,{as:title&&title.length<10?"h1":"h3",ellipsis:!0,title,variant:title&&title.length<10?_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__.rK.displayMd:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__.rK.headingMd,fontWeight:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__.m5.NORMAL},title):react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xv,{as:"h3",ellipsis:!0,fontWeight:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__.m5.NORMAL,variant:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_4__.rK.headingMd},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_user_preferenced_currency_display__WEBPACK_IMPORTED_MODULE_5__.Z,{ethLogoHeight:24,hideLabel:!isContractInteraction,showCurrencySuffix:isContractInteraction,showEthLogo:!0,type:_helpers_constants_common__WEBPACK_IMPORTED_MODULE_2__._8,value:hexTransactionAmount}))};ConfirmTitle.propTypes={txData:prop_types__WEBPACK_IMPORTED_MODULE_6___default().object.isRequired,title:prop_types__WEBPACK_IMPORTED_MODULE_6___default().oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_6___default().string,prop_types__WEBPACK_IMPORTED_MODULE_6___default().number]),hexTransactionAmount:prop_types__WEBPACK_IMPORTED_MODULE_6___default().string},ConfirmTitle.__docgenInfo={description:"",methods:[],displayName:"ConfirmTitle",props:{txData:{description:"",type:{name:"object"},required:!0},title:{description:"",type:{name:"union",value:[{name:"string"},{name:"number"}]},required:!1},hexTransactionAmount:{description:"",type:{name:"string"},required:!1}}};const __WEBPACK_DEFAULT_EXPORT__=ConfirmTitle},"./ui/components/app/confirm-title/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>_confirm_title__WEBPACK_IMPORTED_MODULE_0__.Z});var _confirm_title__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./ui/components/app/confirm-title/confirm-title.js")},"./ui/components/app/fee-details-component/fee-details-component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>FeeDetailsComponent});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),react_redux__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-redux/es/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__("./node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_13___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_13__),_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./ui/helpers/constants/design-system.ts"),_component_library__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./ui/components/component-library/index.ts"),_transaction_detail_item_transaction_detail_item_component__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./ui/components/app/transaction-detail-item/transaction-detail-item.component.js"),_selectors__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./ui/selectors/index.js"),_hooks_useI18nContext__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./ui/hooks/useI18nContext.js"),_ui_loading_heartbeat__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./ui/components/ui/loading-heartbeat/index.js"),_user_preferenced_currency_display_user_preferenced_currency_display_component__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./ui/components/app/user-preferenced-currency-display/user-preferenced-currency-display.component.js"),_helpers_constants_common__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./ui/helpers/constants/common.ts"),_shared_modules_conversion_utils__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__("./shared/modules/conversion.utils.ts"),_helpers_utils_optimism_fetchEstimatedL1Fee__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./ui/helpers/utils/optimism/fetchEstimatedL1Fee.js"),_contexts_gasFee__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__("./ui/contexts/gasFee.js");function FeeDetailsComponent({txData,useCurrencyRateCheck,hideGasDetails=!1}){const[expandFeeDetails,setExpandFeeDetails]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),[estimatedL1Fees,setEstimatedL1Fees]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),isMultiLayerFeeNetwork=(0,react_redux__WEBPACK_IMPORTED_MODULE_1__.v9)(_selectors__WEBPACK_IMPORTED_MODULE_5__.SEh),{useNativeCurrencyAsPrimaryCurrency}=(0,react_redux__WEBPACK_IMPORTED_MODULE_1__.v9)(_selectors__WEBPACK_IMPORTED_MODULE_5__.Izy),t=(0,_hooks_useI18nContext__WEBPACK_IMPORTED_MODULE_6__.C)(),{maximumCostInHexWei:hexMaximumTransactionFee,minimumCostInHexWei:hexMinimumTransactionFee}=(0,_contexts_gasFee__WEBPACK_IMPORTED_MODULE_12__.YJ)();(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{isMultiLayerFeeNetwork&&(0,_helpers_utils_optimism_fetchEstimatedL1Fee__WEBPACK_IMPORTED_MODULE_11__.Z)(null==txData?void 0:txData.chainId,txData).then((result=>{setEstimatedL1Fees(result)})).catch((_err=>{setEstimatedL1Fees(null)}))}),[isMultiLayerFeeNetwork,txData]);const getTransactionFeeTotal=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>isMultiLayerFeeNetwork?(0,_shared_modules_conversion_utils__WEBPACK_IMPORTED_MODULE_10__.Mc)(hexMaximumTransactionFee,estimatedL1Fees||0):hexMaximumTransactionFee),[isMultiLayerFeeNetwork,hexMaximumTransactionFee,estimatedL1Fees]),renderTotalDetailText=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"confirm-page-container-content__total-value"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_loading_heartbeat__WEBPACK_IMPORTED_MODULE_7__.Z,{estimateUsed:null==txData?void 0:txData.userFeeLevel}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_user_preferenced_currency_display_user_preferenced_currency_display_component__WEBPACK_IMPORTED_MODULE_8__.Z,{type:_helpers_constants_common__WEBPACK_IMPORTED_MODULE_9__.Vb,key:"total-detail-text",value,hideLabel:Boolean(useNativeCurrencyAsPrimaryCurrency)}))),[txData,useNativeCurrencyAsPrimaryCurrency]),renderTotalDetailValue=(0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value=>react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"confirm-page-container-content__total-value"},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_ui_loading_heartbeat__WEBPACK_IMPORTED_MODULE_7__.Z,{estimateUsed:null==txData?void 0:txData.userFeeLevel}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_user_preferenced_currency_display_user_preferenced_currency_display_component__WEBPACK_IMPORTED_MODULE_8__.Z,{type:_helpers_constants_common__WEBPACK_IMPORTED_MODULE_9__._8,key:"total-detail-value",value,hideLabel:!useNativeCurrencyAsPrimaryCurrency}))),[txData,useNativeCurrencyAsPrimaryCurrency]);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xu,{display:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.sS.Flex,alignItems:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.g1.center,justifyContent:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.E0.center,flexDirection:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.Qb.Column},!hideGasDetails&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xu,{padding:4,display:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.sS.Flex,alignItems:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.g1.center,justifyContent:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.E0.center},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.zx,{style:{textDecoration:"none"},size:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.$u.Xs,variant:_component_library__WEBPACK_IMPORTED_MODULE_3__.RN.LINK,endIconName:expandFeeDetails?_component_library__WEBPACK_IMPORTED_MODULE_3__.uH.ArrowUp:_component_library__WEBPACK_IMPORTED_MODULE_3__.uH.ArrowDown,color:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.EY.primaryDefault,"data-testid":"expand-fee-details-button",onClick:()=>setExpandFeeDetails(!expandFeeDetails)},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xv,{variant:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.rK.bodySm,color:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.EY.primaryDefault},t("feeDetails"))))),!hideGasDetails&&expandFeeDetails&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_library__WEBPACK_IMPORTED_MODULE_3__.xu,{display:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.sS.Flex,flexDirection:_helpers_constants_design_system__WEBPACK_IMPORTED_MODULE_2__.Qb.Column},isMultiLayerFeeNetwork&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_transaction_detail_item_transaction_detail_item_component__WEBPACK_IMPORTED_MODULE_4__.Z,{detailTitle:t("optimismFees"),detailText:useCurrencyRateCheck&&renderTotalDetailText(hexMinimumTransactionFee),detailTotal:renderTotalDetailValue(hexMinimumTransactionFee),boldHeadings:!1}),isMultiLayerFeeNetwork&&estimatedL1Fees&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_transaction_detail_item_transaction_detail_item_component__WEBPACK_IMPORTED_MODULE_4__.Z,{detailTitle:t("layer1Fees"),detailText:useCurrencyRateCheck&&renderTotalDetailText(estimatedL1Fees),detailTotal:renderTotalDetailValue(estimatedL1Fees),boldHeadings:!1}),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_transaction_detail_item_transaction_detail_item_component__WEBPACK_IMPORTED_MODULE_4__.Z,{detailTitle:t("total"),detailText:useCurrencyRateCheck&&renderTotalDetailText(getTransactionFeeTotal),detailTotal:renderTotalDetailValue(getTransactionFeeTotal)})))}FeeDetailsComponent.propTypes={txData:prop_types__WEBPACK_IMPORTED_MODULE_13___default().object,useCurrencyRateCheck:prop_types__WEBPACK_IMPORTED_MODULE_13___default().bool,hideGasDetails:prop_types__WEBPACK_IMPORTED_MODULE_13___default().bool},FeeDetailsComponent.__docgenInfo={description:"",methods:[],displayName:"FeeDetailsComponent",props:{hideGasDetails:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},txData:{description:"",type:{name:"object"},required:!1},useCurrencyRateCheck:{description:"",type:{name:"bool"},required:!1}}}},"./ui/components/app/transaction-alerts/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>transaction_alerts});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),es=__webpack_require__("./node_modules/react-redux/es/index.js"),dist=__webpack_require__("./node_modules/@metamask/transaction-controller/dist/index.js"),gas=__webpack_require__("./shared/constants/gas.ts"),selectors=__webpack_require__("./ui/selectors/index.js"),gasFee=__webpack_require__("./ui/contexts/gasFee.js"),useI18nContext=__webpack_require__("./ui/hooks/useI18nContext.js"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),simulation_error_message=__webpack_require__("./ui/components/ui/simulation-error-message/index.js"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),zendesk_url=__webpack_require__("./ui/helpers/constants/zendesk-url.js"),metametrics=__webpack_require__("./ui/contexts/metametrics.js"),security_provider_utils=__webpack_require__("./shared/modules/security-provider.utils.ts"),blockaid_banner_alert=__webpack_require__("./ui/components/app/security-provider-banner-alert/blockaid-banner-alert/blockaid-banner-alert.js"),security_provider_banner_message=__webpack_require__("./ui/components/app/security-provider-banner-message/security-provider-banner-message.js"),metamask=__webpack_require__("./ui/ducks/metamask/metamask.js"),transaction_utils=__webpack_require__("./shared/modules/transaction.utils.js"),metamask_controller_utils=__webpack_require__("./shared/lib/metamask-controller-utils.js"),constants_metametrics=__webpack_require__("./shared/constants/metametrics.ts");const TransactionAlerts=({userAcknowledgedGasMissing,setUserAcknowledgedGasMissing,tokenSymbol,txData})=>{const{estimateUsed,hasSimulationError,supportsEIP1559,isNetworkBusy}=(0,gasFee.YJ)(),pendingTransactions=(0,es.v9)(selectors.MBu),t=(0,useI18nContext.C)(),nativeCurrency=(0,es.v9)(metamask.JK),transactionData=txData.txParams.data,currentTokenSymbol=tokenSymbol||nativeCurrency;let currentTokenAmount;if(txData.type===dist.TransactionType.simpleSend&&(currentTokenAmount=txData.txParams.value),txData.type===dist.TransactionType.tokenMethodTransfer){const tokenData=(0,transaction_utils.I1)(transactionData);currentTokenAmount=(0,metamask_controller_utils.d)(tokenData)}const isSendingZero=(txData.type===dist.TransactionType.simpleSend||txData.type===dist.TransactionType.tokenMethodTransfer)&&("0x0"===currentTokenAmount||"0"===currentTokenAmount),trackEvent=(0,react.useContext)(metametrics.Wd),onClickSupportLink=(0,react.useCallback)((()=>{trackEvent({category:constants_metametrics.ci.Transactions,event:constants_metametrics.AW.ExternalLinkClicked,properties:{action:"Confirm Screen",origin:null==txData?void 0:txData.origin,external_link_clicked:"security_alert_support_link"}})}),[]);return react.createElement("div",{className:"transaction-alerts"},react.createElement(blockaid_banner_alert.Z,{onClickSupportLink,txData}),(0,security_provider_utils.D)(null==txData?void 0:txData.securityProviderResponse)&&react.createElement(security_provider_banner_message.Z,{securityProviderResponse:txData.securityProviderResponse}),supportsEIP1559&&hasSimulationError&&react.createElement(simulation_error_message.Z,{userAcknowledgedGasMissing,setUserAcknowledgedGasMissing}),supportsEIP1559&&(null==pendingTransactions?void 0:pendingTransactions.length)>0&&react.createElement(component_library.wB,{severity:design_system.t3.WARNING},react.createElement(component_library.xv,{as:"p"},react.createElement("strong",null,1===(null==pendingTransactions?void 0:pendingTransactions.length)?t("pendingTransactionSingle",[null==pendingTransactions?void 0:pendingTransactions.length]):t("pendingTransactionMultiple",[null==pendingTransactions?void 0:pendingTransactions.length]))," ",t("pendingTransactionInfo"),t("learnCancelSpeeedup",[react.createElement(component_library.ZP,{key:"cancelSpeedUpInfo",href:zendesk_url.Z.SPEEDUP_CANCEL,rel:"noopener noreferrer",target:"_blank"},t("cancelSpeedUp"))]))),estimateUsed===gas.o7.low&&react.createElement(component_library.wB,{"data-testid":"low-gas-fee-alert",severity:design_system.t3.WARNING},t("lowPriorityMessage")),supportsEIP1559&&isNetworkBusy?react.createElement(component_library.wB,{severity:design_system.t3.WARNING},t("networkIsBusy")):null,isSendingZero&&react.createElement(component_library.wB,{severity:design_system.t3.WARNING},t("sendingZeroAmount",[currentTokenSymbol])))};TransactionAlerts.propTypes={userAcknowledgedGasMissing:prop_types_default().bool,setUserAcknowledgedGasMissing:prop_types_default().func,tokenSymbol:prop_types_default().string,txData:prop_types_default().object},TransactionAlerts.__docgenInfo={description:"",methods:[],displayName:"TransactionAlerts",props:{userAcknowledgedGasMissing:{description:"",type:{name:"bool"},required:!1},setUserAcknowledgedGasMissing:{description:"",type:{name:"func"},required:!1},tokenSymbol:{description:"",type:{name:"string"},required:!1},txData:{description:"",type:{name:"object"},required:!1}}};const transaction_alerts=TransactionAlerts},"./ui/components/app/transaction-detail/transaction-detail.component.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>TransactionDetail});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),gasFee=__webpack_require__("./ui/contexts/gasFee.js"),useI18nContext=__webpack_require__("./ui/hooks/useI18nContext.js"),box=__webpack_require__("./ui/components/ui/box/index.js"),gas=__webpack_require__("./shared/constants/gas.ts"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),constants_gas=__webpack_require__("./ui/helpers/constants/gas.js"),useTransactionEventFragment=__webpack_require__("./ui/hooks/useTransactionEventFragment.js"),transaction_modal=__webpack_require__("./ui/contexts/transaction-modal.js"),info_tooltip=__webpack_require__("./ui/components/ui/info-tooltip/info-tooltip.js"),component_library=__webpack_require__("./ui/components/component-library/index.ts");function EditGasFeeButton({userAcknowledgedGasMissing}){const t=(0,useI18nContext.C)(),{editGasMode,gasLimit,hasSimulationError,estimateUsed,maxFeePerGas,maxPriorityFeePerGas,supportsEIP1559,transaction}=(0,gasFee.YJ)(),{updateTransactionEventFragment}=(0,useTransactionEventFragment.s)(),{openModal}=(0,transaction_modal.y8)();if(!supportsEIP1559||!estimateUsed||!(!hasSimulationError||!0===userAcknowledgedGasMissing))return null;let icon=estimateUsed,title=estimateUsed;estimateUsed===gas.o7.high&&editGasMode===gas.G_.swaps?(icon="swapSuggested",title="swapSuggested"):estimateUsed===gas.o7.tenPercentIncreased&&(icon=void 0,title="tenPercentIncreased");return react.createElement("div",{className:"edit-gas-fee-button"},react.createElement("button",{onClick:()=>{updateTransactionEventFragment({gas_edit_attempted:"basic"}),openModal("editGasFee")},"data-testid":"edit-gas-fee-button"},icon&&react.createElement("span",{className:"edit-gas-fee-button__icon"},constants_gas.K7[icon]),react.createElement("span",{className:"edit-gas-fee-button__label"},t(title)),react.createElement(component_library.JO,{name:component_library.uH.ArrowRight,color:design_system.Il.primaryDefault,size:component_library.Jh.Xs})),"custom"===estimateUsed&&react.createElement("button",{onClick:()=>{updateTransactionEventFragment({gas_edit_attempted:"advanced"}),openModal("advancedGasFee")}},t("edit")),"dappSuggested"===estimateUsed&&react.createElement(info_tooltip.Z,{contentText:react.createElement("div",{className:"edit-gas-fee-button__tooltip"},(null==transaction?void 0:transaction.origin)&&react.createElement(component_library.xv,{variant:design_system.rK.bodySm,as:"h6",color:design_system.d9.textAlternative},t("dappSuggestedTooltip",[transaction.origin])),react.createElement(component_library.xv,{variant:design_system.rK.bodySm,as:"h6"},react.createElement("b",null,t("maxBaseFee"))," ",maxFeePerGas),react.createElement(component_library.xv,{variant:design_system.rK.bodySm,as:"h6"},react.createElement("b",null,t("maxPriorityFee"))," ",maxPriorityFeePerGas),react.createElement(component_library.xv,{variant:design_system.rK.bodySm,as:"h6"},react.createElement("b",null,t("gasLimit"))," ",gasLimit)),position:"top"}))}EditGasFeeButton.propTypes={userAcknowledgedGasMissing:prop_types_default().bool},EditGasFeeButton.__docgenInfo={description:"",methods:[],displayName:"EditGasFeeButton",props:{userAcknowledgedGasMissing:{description:"",type:{name:"bool"},required:!1}}};var transaction_detail_item_component=__webpack_require__("./ui/components/app/transaction-detail-item/transaction-detail-item.component.js");function TransactionDetail({rows=[],onEdit,userAcknowledgedGasMissing=!1,disableEditGasFeeButton=!1}){const t=(0,useI18nContext.C)(),{supportsEIP1559}=(0,gasFee.YJ)();return react.createElement("div",{className:"transaction-detail"},supportsEIP1559&&!disableEditGasFeeButton&&react.createElement(box.ZP,{display:"flex",justifyContent:"flex-end",paddingTop:5},react.createElement(EditGasFeeButton,{userAcknowledgedGasMissing})),!supportsEIP1559&&onEdit&&react.createElement("div",{className:"transaction-detail-edit"},react.createElement("button",{onClick:onEdit},t("edit"))),react.createElement("div",{className:"transaction-detail-rows"},rows))}TransactionDetail.propTypes={rows:prop_types_default().arrayOf(transaction_detail_item_component.Z).isRequired,onEdit:prop_types_default().func,userAcknowledgedGasMissing:prop_types_default().bool,disableEditGasFeeButton:prop_types_default().bool},TransactionDetail.__docgenInfo={description:"",methods:[],displayName:"TransactionDetail",props:{rows:{defaultValue:{value:"[]",computed:!1},description:"Show item content for transaction detail. Array of TransactionDetailItem components",type:{name:"arrayOf",value:{name:"custom",raw:"TransactionDetailItem"}},required:!1},userAcknowledgedGasMissing:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},disableEditGasFeeButton:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},onEdit:{description:"onClick handler for the Edit link",type:{name:"func"},required:!1}}}},"./ui/components/institutional/note-to-trader/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>note_to_trader});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),component_library=__webpack_require__("./ui/components/component-library/index.ts");const NoteToTrader=props=>{const{placeholder,maxLength,onChange,noteText,labelText}=props;return react.createElement(component_library.xu,{className:"confirm-page-container-content__data"},react.createElement(component_library.xu,{display:design_system.sS.Flex,flexDirection:design_system.Qb.Column,padding:4},react.createElement(component_library.xu,{className:"note-header",display:design_system.sS.Flex,justifyContent:design_system.E0.spaceBetween},react.createElement(component_library.__,{htmlFor:"transaction-note"},labelText),react.createElement(component_library.xv,{className:"note-header__counter"},noteText.length,"/",maxLength)),react.createElement(component_library.xu,{display:design_system.sS.Flex,flexDirection:design_system.Qb.Column,className:"note-field"},react.createElement("textarea",{id:"transaction-note","data-testid":"transaction-note",onChange:({target:{value}})=>onChange(value),autoFocus:!0,maxLength,placeholder,value:noteText}))))};NoteToTrader.propTypes={placeholder:prop_types_default().string,maxLength:prop_types_default().string,onChange:prop_types_default().func,noteText:prop_types_default().string,labelText:prop_types_default().string},NoteToTrader.__docgenInfo={description:"",methods:[],displayName:"NoteToTrader",props:{placeholder:{description:"",type:{name:"string"},required:!1},maxLength:{description:"",type:{name:"string"},required:!1},onChange:{description:"",type:{name:"func"},required:!1},noteText:{description:"",type:{name:"string"},required:!1},labelText:{description:"",type:{name:"string"},required:!1}}};const note_to_trader=NoteToTrader},"./ui/components/ui/simulation-error-message/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>SimulationErrorMessage});var react=__webpack_require__("./node_modules/react/index.js"),prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),component_library=__webpack_require__("./ui/components/component-library/index.ts"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),i18n=__webpack_require__("./.storybook/i18n.js"),metametrics=__webpack_require__("./shared/constants/metametrics.ts"),contexts_metametrics=__webpack_require__("./ui/contexts/metametrics.js");function SimulationErrorMessage({userAcknowledgedGasMissing=!1,setUserAcknowledgedGasMissing}){const t=(0,react.useContext)(i18n.OO),trackEvent=(0,react.useContext)(contexts_metametrics.Wd);return(0,react.useEffect)((()=>{trackEvent({category:metametrics.ci.Transactions,event:metametrics.AW.SimulationFails,properties:{ui_customizations:[metametrics.Hv.GasEstimationFailed]}})}),[]),!0===userAcknowledgedGasMissing?react.createElement(component_library.wB,{severity:design_system.t3.DANGER},t("simulationErrorMessageV2")):react.createElement(component_library.wB,{severity:design_system.t3.DANGER,actionButtonLabel:t("proceedWithTransaction"),actionButtonOnClick:setUserAcknowledgedGasMissing},t("simulationErrorMessageV2"))}SimulationErrorMessage.propTypes={userAcknowledgedGasMissing:prop_types_default().bool,setUserAcknowledgedGasMissing:prop_types_default().func},SimulationErrorMessage.__docgenInfo={description:"",methods:[],displayName:"SimulationErrorMessage",props:{userAcknowledgedGasMissing:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},setUserAcknowledgedGasMissing:{description:"",type:{name:"func"},required:!1}}}}}]);