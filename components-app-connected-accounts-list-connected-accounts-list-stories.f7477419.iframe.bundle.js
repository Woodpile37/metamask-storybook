"use strict";(globalThis.webpackChunkmetamask_crx=globalThis.webpackChunkmetamask_crx||[]).push([[1753],{"./ui/components/app/connected-accounts-list/connected-accounts-list.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DefaultStory:()=>DefaultStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _DefaultStory$paramet,_DefaultStory$paramet2,react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),___WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./ui/components/app/connected-accounts-list/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/App/ConnectedAccountsList",argTypes:{connectedAccounts:{control:"array"},selectedAddress:{control:"text"},shouldRenderListOptions:{control:"boolean"}},args:{connectedAccounts:[{name:"This is a Really Long Account Name",address:"0x64a845a5b02460acf8a3d84503b0d68d028b4bb4",index:0,balance:"0x176e5b6f173ebe66"},{name:"Account 2",address:"0xb19ac54efa18cc3a14a5b821bfec73d284bf0c5e",index:1,balance:"0x2d3142f5000"}]}},DefaultStory=args=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(___WEBPACK_IMPORTED_MODULE_1__.Z,args);DefaultStory.storyName="Default",DefaultStory.parameters={...DefaultStory.parameters,docs:{...null===(_DefaultStory$paramet=DefaultStory.parameters)||void 0===_DefaultStory$paramet?void 0:_DefaultStory$paramet.docs,source:{originalSource:"args => <ConnectedAccountsList {...args} />",...null===(_DefaultStory$paramet2=DefaultStory.parameters)||void 0===_DefaultStory$paramet2||null===(_DefaultStory$paramet2=_DefaultStory$paramet2.docs)||void 0===_DefaultStory$paramet2?void 0:_DefaultStory$paramet2.source}}};const __namedExportsOrder=["DefaultStory"];DefaultStory.__docgenInfo={description:"",methods:[],displayName:"DefaultStory"}},"./ui/components/app/connected-accounts-list/connected-accounts-list-options/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>connected_accounts_list_options_component});var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),react=__webpack_require__("./node_modules/react/index.js"),menu=__webpack_require__("./ui/components/ui/menu/index.js"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),useI18nContext=__webpack_require__("./ui/hooks/useI18nContext.js");const ConnectedAccountsListOptions=({children,onShowOptions,onHideOptions,show})=>{const ref=(0,react.useRef)(!1),t=(0,useI18nContext.C)();return react.createElement("div",{ref},react.createElement(component_library.Ei,{iconName:component_library.uH.MoreVertical,className:"connected-accounts-options__button",onClick:onShowOptions,ariaLabel:t("options")}),show?react.createElement(menu.v,{anchorElement:ref.current,onHide:onHideOptions,popperOptions:{modifiers:[{name:"preventOverflow",options:{altBoundary:!0}}]}},children):null)};ConnectedAccountsListOptions.propTypes={children:prop_types_default().node.isRequired,onHideOptions:prop_types_default().func.isRequired,onShowOptions:prop_types_default().func.isRequired,show:prop_types_default().bool.isRequired},ConnectedAccountsListOptions.__docgenInfo={description:"",methods:[],displayName:"ConnectedAccountsListOptions",props:{children:{description:"",type:{name:"node"},required:!0},onHideOptions:{description:"",type:{name:"func"},required:!0},onShowOptions:{description:"",type:{name:"func"},required:!0},show:{description:"",type:{name:"bool"},required:!0}}};const connected_accounts_list_options_component=ConnectedAccountsListOptions},"./ui/components/app/connected-accounts-list/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Z:()=>ConnectedAccountsList});var prop_types=__webpack_require__("./node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),react=__webpack_require__("./node_modules/react/index.js"),design_system=__webpack_require__("./ui/helpers/constants/design-system.ts"),component_library=__webpack_require__("./ui/components/component-library/index.ts"),menu=__webpack_require__("./ui/components/ui/menu/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),es=__webpack_require__("./node_modules/react-redux/es/index.js"),util=__webpack_require__("./ui/helpers/utils/util.js"),selectors=__webpack_require__("./ui/selectors/index.js");function ConnectedAccountsListItem({address,className=null,name,status,action=null,options=null,backgroundColor}){const useBlockie=(0,es.v9)(selectors.IBJ),containerbackgroundColor=backgroundColor??design_system.lP.backgroundDefault;return react.createElement(component_library.xu,{className:classnames_default()("connected-accounts-list__row",className),padding:4,backgroundColor:containerbackgroundColor,display:design_system.sS.Flex,flexDirection:design_system.Qb.Row,justifyContent:design_system.E0.spaceBetween,alignItems:design_system.g1.center},react.createElement(component_library.xu,{className:"connected-accounts-list__row-content",gap:4},react.createElement(component_library.pw,{variant:useBlockie?component_library.q.Blockies:component_library.q.Jazzicon,address,size:component_library.qi.Md}),react.createElement(component_library.xu,{display:design_system.sS.Flex,flexDirection:design_system.Qb.Column},react.createElement(component_library.xu,null,react.createElement(component_library.xv,{variant:design_system.rK.bodyLgMedium,className:"connected-accounts-list__account-name"},name),react.createElement(component_library.xv,{variant:design_system.rK.bodyMd},(0,util.$Q)(address)),status?react.createElement(component_library.xv,{variant:design_system.rK.bodyMd,className:"connected-accounts-list__account-status",color:design_system.d9.successDefault},status):null),react.createElement(component_library.xu,{display:design_system.sS.Flex,flexDirection:design_system.Qb.Column},action))),options)}ConnectedAccountsListItem.propTypes={address:prop_types_default().string.isRequired,className:prop_types_default().string,name:prop_types_default().node.isRequired,status:prop_types_default().string,action:prop_types_default().node,options:prop_types_default().node,backgroundColor:prop_types_default().string},ConnectedAccountsListItem.__docgenInfo={description:"",methods:[],displayName:"ConnectedAccountsListItem",props:{className:{defaultValue:{value:"null",computed:!1},description:"An additional className to apply",type:{name:"string"},required:!1},action:{defaultValue:{value:"null",computed:!1},description:"Action for account",type:{name:"node"},required:!1},options:{defaultValue:{value:"null",computed:!1},description:"Render Options button with actions",type:{name:"node"},required:!1},address:{description:"Address for Avatar",type:{name:"string"},required:!0},name:{description:"Name of the account",type:{name:"node"},required:!0},status:{description:"Status showing connected, not connected and active state",type:{name:"string"},required:!1},backgroundColor:{description:"ContainerbackgroundColor showing highlighted state when not connected",type:{name:"string"},required:!1}}};var connected_accounts_list_options=__webpack_require__("./ui/components/app/connected-accounts-list/connected-accounts-list-options/index.js");function _defineProperty(obj,key,value){return(key=function _toPropertyKey(arg){var key=function _toPrimitive(input,hint){if("object"!=typeof input||null===input)return input;var prim=input[Symbol.toPrimitive];if(void 0!==prim){var res=prim.call(input,hint||"default");if("object"!=typeof res)return res;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===hint?String:Number)(input)}(arg,"string");return"symbol"==typeof key?key:String(key)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}class ConnectedAccountsList extends react.PureComponent{constructor(...args){super(...args),_defineProperty(this,"state",{accountWithOptionsShown:null}),_defineProperty(this,"disconnectAccount",(()=>{this.hideAccountOptions(),this.props.removePermittedAccount(this.state.accountWithOptionsShown)})),_defineProperty(this,"switchAccount",(address=>{this.hideAccountOptions(),this.props.setSelectedAddress(address)})),_defineProperty(this,"hideAccountOptions",(()=>{this.setState({accountWithOptionsShown:null})})),_defineProperty(this,"showAccountOptions",(address=>{this.setState({accountWithOptionsShown:address})}))}renderUnconnectedAccount(){const{accountToConnect,connectAccount}=this.props,{t}=this.context;if(!accountToConnect)return null;const{address,name}=accountToConnect;return react.createElement(ConnectedAccountsListItem,{className:"connected-accounts-list__row--highlight",backgroundColor:design_system.lP.warningMuted,address,name,status:t("statusNotConnected"),action:react.createElement(component_library.xv,{variant:design_system.rK.bodyMd},react.createElement(component_library.ZP,{className:"connected-accounts-list__account-status-link",onClick:()=>connectAccount(accountToConnect.address),size:component_library.o3.Inherit},t("connect")))})}renderListItemOptions(address){const{accountWithOptionsShown}=this.state,{t}=this.context;return react.createElement(connected_accounts_list_options.Z,{onHideOptions:this.hideAccountOptions,onShowOptions:this.showAccountOptions.bind(null,address),show:accountWithOptionsShown===address},react.createElement(menu.s,{iconName:component_library.uH.Logout,onClick:this.disconnectAccount},t("disconnectThisAccount")))}renderListItemAction(address){const{t}=this.context;return react.createElement(component_library.xv,{variant:design_system.rK.bodyMd},react.createElement(component_library.ZP,{className:"connected-accounts-list__account-status-link",onClick:()=>this.switchAccount(address),size:component_library.o3.Inherit},t("switchToThisAccount")))}render(){const{connectedAccounts,selectedAddress,shouldRenderListOptions}=this.props,{t}=this.context;return react.createElement(react.Fragment,null,react.createElement("main",{className:"connected-accounts-list"},this.renderUnconnectedAccount(),connectedAccounts.map((({address,name},index)=>react.createElement(ConnectedAccountsListItem,{key:address,address,name,status:0===index?t("active"):null,options:shouldRenderListOptions?this.renderListItemOptions(address):null,action:address===selectedAddress?null:this.renderListItemAction(address)})))))}}_defineProperty(ConnectedAccountsList,"contextTypes",{t:prop_types_default().func.isRequired}),_defineProperty(ConnectedAccountsList,"defaultProps",{accountToConnect:null}),_defineProperty(ConnectedAccountsList,"propTypes",{accountToConnect:prop_types_default().shape({address:prop_types_default().string.isRequired,name:prop_types_default().string.isRequired}),connectedAccounts:prop_types_default().arrayOf(prop_types_default().shape({address:prop_types_default().string.isRequired,name:prop_types_default().string.isRequired,lastActive:prop_types_default().number})).isRequired,connectAccount:prop_types_default().func.isRequired,selectedAddress:prop_types_default().string.isRequired,removePermittedAccount:prop_types_default().func,setSelectedAddress:prop_types_default().func.isRequired,shouldRenderListOptions:(props,propName,componentName)=>"boolean"!=typeof props[propName]?new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' must be a boolean. Received: ${typeof props[propName]}`):props[propName]&&!props.removePermittedAccount?new Error(`Warning: Failed prop type: '${propName}' of component '${componentName}' requires prop 'removePermittedAccount'.`):void 0}),ConnectedAccountsList.__docgenInfo={description:"",methods:[{name:"disconnectAccount",docblock:null,modifiers:[],params:[],returns:null},{name:"switchAccount",docblock:null,modifiers:[],params:[{name:"address",type:null}],returns:null},{name:"hideAccountOptions",docblock:null,modifiers:[],params:[],returns:null},{name:"showAccountOptions",docblock:null,modifiers:[],params:[{name:"address",type:null}],returns:null},{name:"renderUnconnectedAccount",docblock:null,modifiers:[],params:[],returns:null},{name:"renderListItemOptions",docblock:null,modifiers:[],params:[{name:"address",type:null}],returns:null},{name:"renderListItemAction",docblock:null,modifiers:[],params:[{name:"address",type:null}],returns:null}],displayName:"ConnectedAccountsList",props:{accountToConnect:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"shape",value:{address:{name:"string",required:!0},name:{name:"string",required:!0}}},required:!1},connectedAccounts:{description:"",type:{name:"arrayOf",value:{name:"shape",value:{address:{name:"string",required:!0},name:{name:"string",required:!0},lastActive:{name:"number",required:!1}}}},required:!0},connectAccount:{description:"",type:{name:"func"},required:!0},selectedAddress:{description:"",type:{name:"string"},required:!0},removePermittedAccount:{description:"",type:{name:"func"},required:!1},setSelectedAddress:{description:"",type:{name:"func"},required:!0},shouldRenderListOptions:{description:"",type:{name:"custom",raw:"(props, propName, componentName) => {\n  if (typeof props[propName] !== 'boolean') {\n    return new Error(\n      `Warning: Failed prop type: '${propName}' of component '${componentName}' must be a boolean. Received: ${typeof props[\n        propName\n      ]}`,\n    );\n  } else if (props[propName] && !props.removePermittedAccount) {\n    return new Error(\n      `Warning: Failed prop type: '${propName}' of component '${componentName}' requires prop 'removePermittedAccount'.`,\n    );\n  }\n  return undefined;\n}"},required:!1}},context:{t:{type:{name:"func"},required:!0}}}}}]);